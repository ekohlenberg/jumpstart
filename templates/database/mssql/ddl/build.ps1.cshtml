# PowerShell script to build the database
# Reads server information from .namespace.json or .namespace file in user's home directory

# Get the user's home directory
$jsonFile = Join-Path $env:USERPROFILE ".@(Model.Name).json"
$legacyFile = Join-Path $env:USERPROFILE ".@(Model.Name)"

# Initialize variables with defaults
$dbType = "sqlserver"
$server = "localhost"
$port = "1433"
$database = "@(Model.Name)"
$username = ""
$password = ""

# Try to read JSON format first
if (Test-Path $jsonFile) {
    Write-Host "Reading configuration from: $jsonFile"
    $jsonContent = Get-Content $jsonFile -Raw | ConvertFrom-Json
    
    # Get the default datasource
    if ($jsonContent.datasources.default) {
        $defaultDs = $jsonContent.datasources.default
        
        if ($defaultDs.dbtype) { $dbType = $defaultDs.dbtype }
        if ($defaultDs.hostname) { $server = $defaultDs.hostname }
        if ($defaultDs.port) { $port = $defaultDs.port }
        if ($defaultDs.database) { $database = $defaultDs.database }
        if ($defaultDs.username) { $username = $defaultDs.username }
        if ($defaultDs.password) { $password = $defaultDs.password }
    }
}
# Fall back to legacy format
elseif (Test-Path $legacyFile) {
    Write-Host "Reading configuration from legacy file: $legacyFile"
    $namespaceContent = Get-Content $legacyFile -Raw
    $namespaceParts = $namespaceContent.Trim().Split(':')
    
    if ($namespaceParts.Count -lt 4) {
        Write-Error "Invalid namespace file format. Expected: dbtype:server:port:database[:username:password]"
        Write-Error "Found: $namespaceContent"
        exit 1
    }
    
    $dbType = $namespaceParts[0]
    $server = $namespaceParts[1]
    $port = $namespaceParts[2]
    $database = $namespaceParts[3]
    
    if ($namespaceParts.Count -ge 5) {
        $username = $namespaceParts[4]
    }
    if ($namespaceParts.Count -ge 6) {
        $password = $namespaceParts[5]
    }
}
else {
    Write-Error "Configuration file not found. Looking for:"
    Write-Error "  - $jsonFile"
    Write-Error "  - $legacyFile"
    Write-Error "Please create a .@(Model.Name).json file in your home directory"
    exit 1
}

# Validate that this is for SQL Server
if ($dbType -ne "mssql" -and $dbType -ne "sqlserver") {
    Write-Error "This script is for SQL Server databases. Namespace file specifies: $dbType"
    exit 1
}

# Build the connection string
$connectionString = "$server"
if ($port -and $port -ne "1433") {
    $connectionString += ",$port"
}

Write-Host "Connecting to SQL Server: $connectionString"
Write-Host "Database: $database"

# Build sqlcmd authentication parameters
$authParams = @@()
if ($username -and $password) {
    Write-Host "Using SQL Server authentication with username: $username"
    $authParams = @@("-U", $username, "-P", $password)
}
else {
    Write-Host "Using Windows authentication"
    $authParams = @@("-E")
}

# Execute the database creation script
Write-Host "Executing database creation script..."
sqlcmd -S $connectionString @@authParams -i ".\@(Model.Name + ".database.create.generated.sql")"

if ($LASTEXITCODE -ne 0) {
    Write-Error "Failed to execute database creation script"
    exit $LASTEXITCODE
}

# Execute all other SQL files
@foreach( string sourceFile in Model.sourceFiles) {
    if (sourceFile == Model.Name + ".database.create.generated.sql") {
        continue;
    }
    else if (sourceFile.Contains("build")) {
        continue;
    }
    else {
        <text>
Write-Host "Executing: @(sourceFile)"
sqlcmd -S $connectionString @@authParams -i ".\@(sourceFile)"
if ($LASTEXITCODE -ne 0) {
    Write-Error "Failed to execute: @(sourceFile)"
    exit $LASTEXITCODE
}
        </text>
    }
}

Write-Host "Database build completed successfully!"