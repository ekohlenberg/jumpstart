-- =====================================
-- Generate SELECT queries for all objects
-- =====================================
@using System.Linq;
@using System.Collections.Generic;
@using jumpstart;

@{
	MetaObject metaObject = (MetaObject)Model;
	//if (metaObject.SchemaName == "sec") return;
	//if (metaObject.SchemaName == "core") return;
	

    //foreach( var metaObject in Model.Objects)

	
	var domainObj = metaObject.DomainObj;
	var tableName = metaObject.TableName;
	var schemaName = metaObject.SchemaName;
	
	// Get all attributes for this object
	var attributes = metaObject.Attributes;
	
	// Find foreign key relationships
	var foreignKeys = new List<MetaAttribute>();
	foreach(var attr in attributes)
	{
		if (!string.IsNullOrEmpty(attr.FkObject))
		{
			foreignKeys.Add(attr);
		}
	}
	
	// Build the SELECT clause for main table attributes 
	var selectColumns = new List<string>();
	foreach(var attr in attributes)
	{
		if (attr.Name != "id")
		{
			selectColumns.Add(tableName + "." + attr.Name);
		}
	}
	
	// Build the SELECT clause for foreign key RWK columns with improved aliasing
	var fkSelectColumns = new List<string>();
	var joinClauses = new List<string>();
	var fkTableNames = new List<string>();
	
	// Track used aliases to avoid conflicts
	var usedAliases = new HashSet<string>();
	
	foreach(var fk in foreignKeys)
	{
		var fkTable = fk.FkObject;
		fkTableNames.Add(fkTable);
		
		// Find the foreign key object
		var fkObject = (MetaObject)null;
		foreach(var obj in metaObject.Model.Objects)
		{
			if (obj.TableName == fk.FkTable)
			{
				fkObject = obj;
				break;
			}
		}
		if (fkObject != null)
		{
			// Create unique alias based on foreign key column name
			// Remove "_id" suffix and use the remaining part as the alias base
			var aliasBase = fk.Name;
			if (aliasBase.EndsWith("_id"))
			{
				aliasBase = aliasBase.Substring(0, aliasBase.Length - 3);
			}
			
			// Ensure alias is unique
			var alias = aliasBase;
			var counter = 1;
			while (usedAliases.Contains(alias))
			{
				alias = aliasBase + "_" + counter;
				counter++;
			}
			usedAliases.Add(alias);
			
			// Get RWK columns from the foreign key table with improved aliasing
			foreach(var fkAttr in fkObject.Attributes)
			{
				if (fkAttr.RWK == "1")
				{
					// Use the unique alias for the column reference
					fkSelectColumns.Add(alias + "." + fkAttr.Name + " AS " + alias + "_" + fkAttr.Name);
				}
			}
			
			// Build JOIN clause with unique alias
			joinClauses.Add("LEFT JOIN " + fkObject.SchemaName + "." + fkObject.TableName + " " + alias + " ON " + tableName + "." + fk.Name + " = " + alias + ".id");
		}
	}
	
	// Build RWK expression for get-by-rwk query
	var rwkExpressions = new List<string>();
	foreach(var attr in attributes)
	{
		if (attr.RWK == "1")
		{
			rwkExpressions.Add(tableName + "." + attr.Name + " = ^(" + attr.Name + ")");
		}
	}
	var rwkExpression = string.Join(" AND ", rwkExpressions);
	
	// Build history column list for the history query
	var historyColumns = new List<string>();
	foreach(var attr in attributes)
	{
		if (attr.Name != "id")
		{
			historyColumns.Add("history.@(schemaName)_@(tableName)." + attr.Name);
		}
	}
	var historyColumnList = historyColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", historyColumns) : "";
	
        <text>
-- =====================================
-- Query for @(domainObj) (@(schemaName).@(tableName))
-- =====================================
DECLARE @@sql_id BIGINT = NEXT VALUE FOR core.sql_identity;

INSERT INTO core.sql (
    id, 
    name, 
    sql_text, 
    description, 
	created_by,
    last_updated, 
    last_updated_by,
	is_active,
	version
) VALUES (
    @@sql_id,
    '@(schemaName).@(tableName)-select',
    'SELECT 
        @(tableName).id@(selectColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", selectColumns) : "")@(fkSelectColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", fkSelectColumns) : "")
    FROM @(schemaName).@(tableName)@(joinClauses.Count > 0 ? "\n    " + string.Join("\n    ", joinClauses) : "")
    ORDER BY @(tableName).id;',
    'Select all @(domainObj) records with related @(string.Join(", ", fkTableNames)) information',
    SYSTEM_USER,
	GETDATE(),
    SYSTEM_USER,
	1,
	1	
);

SET @@sql_id = NEXT VALUE FOR core.sql_identity;

INSERT INTO core.sql (
    id, 
    name, 
    sql_text, 
    description, 
	created_by,
    last_updated, 
    last_updated_by,
	is_active,
	version
) VALUES (
    @@sql_id,
    '@(schemaName).@(tableName)-get',
    'SELECT 
        @(tableName).id@(selectColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", selectColumns) : "")@(fkSelectColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", fkSelectColumns) : "")
    FROM @(schemaName).@(tableName)@(joinClauses.Count > 0 ? "\n    " + string.Join("\n    ", joinClauses) : "")
    WHERE @(tableName).id = ^(id);',
    'Select single @(domainObj) record by ID with related @(string.Join(", ", fkTableNames)) information',
    SYSTEM_USER,
	GETDATE(),
    SYSTEM_USER,
	1,
	1	
);

SET @@sql_id = NEXT VALUE FOR core.sql_identity;

INSERT INTO core.sql (
    id, 
    name, 
    sql_text, 
    description, 
	created_by,
    last_updated, 
    last_updated_by,
	is_active,
	version
) VALUES (
    @@sql_id,
    '@(schemaName).@(tableName)-get-by-rwk',
    'SELECT 
        @(tableName).id@(selectColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", selectColumns) : "")@(fkSelectColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", fkSelectColumns) : "")
    FROM @(schemaName).@(tableName)@(joinClauses.Count > 0 ? "\n    " + string.Join("\n    ", joinClauses) : "")
    WHERE @(rwkExpression);',
    'Select single @(domainObj) record by RWK columns with related @(string.Join(", ", fkTableNames)) information',
    SYSTEM_USER,
	GETDATE(),
    SYSTEM_USER,
	1,
	1	
);

SET @@sql_id = NEXT VALUE FOR core.sql_identity;

INSERT INTO core.sql (
    id, 
    name, 
    sql_text, 
    description, 
	created_by,
    last_updated, 
    last_updated_by,
	is_active,
	version
) VALUES (
    @@sql_id,
    '@(schemaName).@(tableName)-get-history',
    'SELECT 
        history.@(schemaName)_@(tableName).@(tableName)_id,
        history.@(schemaName)_@(tableName).id,
        history.@(schemaName)_@(tableName).is_active,
        history.@(schemaName)_@(tableName).created_by,
        history.@(schemaName)_@(tableName).last_updated,
        history.@(schemaName)_@(tableName).last_updated_by,
        history.@(schemaName)_@(tableName).version@(historyColumnList)
    FROM history.@(schemaName)_@(tableName)
    WHERE history.@(schemaName)_@(tableName).@(tableName)_id = ^(id)
    ORDER BY history.@(schemaName)_@(tableName).last_updated DESC;',
    'Select all history records for @(domainObj) where @(tableName)_id matches the provided id',
    SYSTEM_USER,
	GETDATE(),
    SYSTEM_USER,
	1,
	1	
);

        </text>
    
}
		