-- =====================================
-- Generate SELECT queries for all objects
-- =====================================
@using System.Linq;
@using System.Collections.Generic;
@using jumpstart;

@{
	MetaObject metaObject = (MetaObject)Model;
	//if (metaObject.SchemaName == "sec") return;
	//if (metaObject.SchemaName == "core") return;
	

    //foreach( var metaObject in Model.Objects)

	
	var domainObj = metaObject.DomainObj;
	var tableName = metaObject.TableName;
	var schemaName = metaObject.SchemaName;
	
	// Get all attributes for this object
	var attributes = metaObject.Attributes;
	
	// Find foreign key relationships
	var foreignKeys = new List<MetaAttribute>();
	foreach(var attr in attributes)
	{
		if (!string.IsNullOrEmpty(attr.FkObject))
		{
			foreignKeys.Add(attr);
		}
	}
	
	// Build the SELECT clause for main table attributes 
	var selectColumns = new List<string>();
	foreach(var attr in attributes)
	{
		if (attr.Name != "id")
		{
			selectColumns.Add(tableName + "." + attr.Name);
		}
	}
	
	// Build the SELECT clause for foreign key RWK columns
	var fkSelectColumns = new List<string>();
	var joinClauses = new List<string>();
	var fkTableNames = new List<string>();
	
	foreach(var fk in foreignKeys)
	{
		var fkTable = fk.FkObject;
		fkTableNames.Add(fkTable);
		
		// Find the foreign key object
		var fkObject = (MetaObject)null;
		foreach(var obj in metaObject.Model.Objects)
		{
			if (obj.TableName == fk.FkObject)
			{
				fkObject = obj;
				break;
			}
		}
		if (fkObject != null)
		{
			// Get RWK columns from the foreign key table
			foreach(var fkAttr in fkObject.Attributes)
			{
				if (fkAttr.RWK == "1")
				{
					fkSelectColumns.Add(fkTable + "." + fkAttr.Name + " AS " + fkTable + "_" + fkAttr.Name);
				}
			}
		}
		
		// Build JOIN clause
		joinClauses.Add("LEFT JOIN " + fkObject.SchemaName + "." + fkObject.TableName + " ON " + tableName + "." + fk.Name + " = " + fkObject.TableName + ".id");
	}
        <text>
-- =====================================
-- Query for @(domainObj) (@(schemaName).@(tableName))
-- =====================================
DECLARE @@sql_id BIGINT = NEXT VALUE FOR core.sql_identity;

INSERT INTO core.sql (
    id, 
    name, 
    sql_text, 
    description, 
	created_by,
    last_updated, 
    last_updated_by,
	is_active,
	version
) VALUES (
    @@sql_id,
    '@(schemaName).@(tableName)-select',
    'SELECT 
        @(tableName).id@(selectColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", selectColumns) : "")@(fkSelectColumns.Count > 0 ? ",\n        " + string.Join(",\n        ", fkSelectColumns) : "")
    FROM @(schemaName).@(tableName)@(joinClauses.Count > 0 ? "\n    " + string.Join("\n    ", joinClauses) : "")
    ORDER BY @(tableName).id;',
    'Select all @(domainObj) records with related @(string.Join(", ", fkTableNames)) information',
    SYSTEM_USER,
	GETDATE(),
    SYSTEM_USER,
	1,
	1	
);

        </text>
    
}
		