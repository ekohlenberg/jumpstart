@@page "/@(Model.DomainVar)"
@@using System.Net.Http;
@@using Microsoft.Extensions.DependencyInjection;
@@using System.Reflection;
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@inject NavigationManager Navigation
@@rendermode @@(new InteractiveWebAssemblyRenderMode(prerender: false))
@using jumpstart;
@@using System.Collections.Generic;
@@using @(Model.Namespace).Components;


<PageTitle>@(Model.Label)</PageTitle>

<h1>@(Model.Label)</h1>

<p>This component demonstrates fetching @(Model.Label) data from the server.</p>

@@if (@(Model.DomainVar)List == null)
{
    <p><em>Loading...</em></p>
}
else
{
    Console.WriteLine($"ListTemplate: About to render DataTable with {@@@(Model.DomainVar)List.Length} items");
 
    
    <DataTable Data="&at;@(Model.DomainVar)List" 
               DataType="typeof(@(Model.DomainObj)View)" 
               ShowActions="true" 
               ShowAddButton="true"
               OnEdit="&at;OnEdit@(Model.DomainObj)"
               OnAdd="&at;OnAdd@(Model.DomainObj)" />
    
    Console.WriteLine($"ListTemplate: DataTable rendered");
}

@@code {
    protected  @(Model.DomainObj)View[]? @(Model.DomainVar)List;

    protected override async Task OnInitializedAsync()
    {
        var remoteClient = ClientFactory.CreateClient("RemoteAPI");

        @(Model.DomainVar)List = await remoteClient.GetFromJsonAsync<@(Model.DomainObj)View[]>("api/@(Model.DomainVar)");
        
        Console.WriteLine($"ListTemplate: Loaded {@(Model.DomainVar)List?.Length ?? 0} @(Model.DomainVar) records");
        if (@(Model.DomainVar)List != null && @(Model.DomainVar)List.Length > 0)
        {
            Console.WriteLine($"ListTemplate: First item type: {@(Model.DomainVar)List[0].GetType().Name}");
        }
    }

    async Task OnAdd@(Model.DomainObj)()
    {
        Navigation.NavigateTo("edit-@(Model.DomainVar)");
    }

    async Task OnEdit@(Model.DomainObj)(object item)
    {
        var @(Model.DomainVar) = (@(Model.DomainObj)View)item;
        Navigation.NavigateTo($"edit-@(Model.DomainVar)/{@(Model.DomainVar).id}");
    }

}
