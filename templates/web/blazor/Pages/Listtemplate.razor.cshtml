@@page "/@(Model.DomainVar)"
@@using System.Net.Http;
@@using Microsoft.Extensions.DependencyInjection;
@@using System.Reflection;
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@inject NavigationManager Navigation
@@rendermode @@(new InteractiveWebAssemblyRenderMode(prerender: false))
@using jumpstart;
@using System.Collections.Generic;


<PageTitle>@(Model.Label)</PageTitle>

<h1>@(Model.Label)</h1>

<p>This component demonstrates fetching @(Model.Label) data from the server.</p>

@@if (@(Model.DomainVar)List == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                @@foreach (var property in GetDisplayProperties())
                {
                    <th>@@GetPropertyLabel(property)</th>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @@foreach (var @(Model.DomainVar) in @(Model.DomainVar)List)
            {
                <tr>
                    @@foreach (var property in GetDisplayProperties())
                    {
                        <td>@@GetPropertyValue(@(Model.DomainVar), property)?.ToString()</td>
                    }
                    <td><button class="btn btn-primary" @@onclick="@@(()=> Edit@(Model.DomainObj)(@@@(Model.DomainVar).id))">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
    <td><button class="btn btn-primary" @@onclick="@@(()=> Add@(Model.DomainObj)())">Add</button></td>
}

@@code {
    protected  @(Model.DomainObj)View[]? @(Model.DomainVar)List;

    protected override async Task OnInitializedAsync()
    {
        var remoteClient = ClientFactory.CreateClient("RemoteAPI");

        @(Model.DomainVar)List = await remoteClient.GetFromJsonAsync<@(Model.DomainObj)View[]>("api/@(Model.DomainVar)");
    }

    void Add@(Model.DomainObj)()
    {
        
        Navigation.NavigateTo("edit-@(Model.DomainVar)");
    }

    void Edit@(Model.DomainObj)(long id)
    {
        Navigation.NavigateTo($"edit-@(Model.DomainVar)/{id}");
    }

    // Reflection methods for dynamic table generation
    private System.Reflection.PropertyInfo[] GetDisplayProperties()
    {
        var viewType = typeof(@(Model.DomainObj)View);
        return viewType.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)
                      .Where(p => p.CanRead && 
                                  p.GetCustomAttribute<LabelAttribute>() != null &&
                                  !p.Name.EndsWith("_id"))
                      .OrderBy(p => GetPropertyOrder(p))
                      .ToArray();
    }

    private string GetPropertyLabel(System.Reflection.PropertyInfo property)
    {
        // Check for Label attribute first
        var labelAttr = property.GetCustomAttribute<LabelAttribute>();
        if (labelAttr != null)
        {
            return labelAttr.Label;
        }

        // Fallback to property name with proper formatting
        return FormatPropertyName(property.Name);
    }

    private object GetPropertyValue(object obj, System.Reflection.PropertyInfo property)
    {
        try
        {
            return property.GetValue(obj);
        }
        catch
        {
            return null;
        }
    }

    private int GetPropertyOrder(System.Reflection.PropertyInfo property)
    {
        // Check for Label attribute with order
        /*
        var labelAttr = property.GetCustomAttribute<LabelAttribute>();
        if (labelAttr != null && labelAttr.Order > 0)
        {
            return labelAttr.Order;
        }
*/
        // Default ordering: id first, then alphabetical
        if (property.Name.ToLower() == "id")
            return 0;
        
        return 1000; // Default order for properties without explicit ordering
    }

    private string FormatPropertyName(string propertyName)
    {
        // Convert camelCase/PascalCase to Title Case
        return System.Text.RegularExpressions.Regex.Replace(propertyName, "([a-z])([A-Z])", "$1 $2");
    }



   
}
