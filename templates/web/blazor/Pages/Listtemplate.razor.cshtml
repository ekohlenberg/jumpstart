@@page "/@(Model.DomainVar)"
@@using System.Net.Http;
@@using Microsoft.Extensions.DependencyInjection;
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@inject NavigationManager Navigation
@@rendermode InteractiveWebAssembly
<PageTitle>@(Model.Label)</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">@(Model.Label)</MudText>

<MudText Typo="Typo.body1" Class="mb-4">This component demonstrates fetching @(Model.Label) data from the server.</MudText>

@@if (@(Model.DomainVar)List == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Items="@(Model.DomainVar)List" 
              Dense="true" 
              Hover="true" 
              Striped="true"
              Filter="new Func<@(Model.DomainObj),bool>(FilterFunc)"
              @@bind-SelectedItem="selectedItem"
              Loading="@@loading"
              LoadingProgressColor="Color.Info"
              Breakpoint="Breakpoint.Sm"
              Class="mt-4">
        
        <ToolBarContent>
            <MudText Typo="Typo.h6">@(Model.Label)</MudText>
            <MudSpacer />
            <MudTextField @@bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        
        <HeaderContent>
            @foreach( var a in Model.Attributes)
            {
            <MudTh><MudTableSortLabel SortBy="new Func<@(Model.DomainObj), object>(x=>x.@(a.Name))">@(a.Label)</MudTableSortLabel></MudTh>
            }
            <MudTh>Actions</MudTh>
        </HeaderContent>
        
        <RowTemplate>
            @foreach( var a in Model.Attributes)
            {
            <MudTd DataLabel="@(a.Label)">@@context.@(a.Name)</MudTd>
            }
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@@Icons.Material.Filled.Edit" 
                              Color="Color.Primary" 
                              Size="Size.Small"
                              OnClick="@@( () => Edit@(Model.DomainObj)(context.id))" />
            </MudTd>
        </RowTemplate>
        
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    
    <MudButton Variant="Variant.Filled" 
               Color="Color.Primary" 
               StartIcon="@@Icons.Material.Filled.Add"
               OnClick="@@( () => Add@(Model.DomainObj)())"
               Class="mt-4">
        Add @(Model.Label)
    </MudButton>
}

@@code {
    protected @(Model.Namespace).@(Model.DomainObj)[]? @(Model.DomainVar)List;
    protected @(Model.Namespace).@(Model.DomainObj)? selectedItem;
    protected bool loading = true;
    protected string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        var remoteClient = ClientFactory.CreateClient("RemoteAPI");
        @(Model.DomainVar)List = await remoteClient.GetFromJsonAsync<@(Model.Namespace).@(Model.DomainObj)[]>("api/@(Model.DomainVar)");
        loading = false;
    }

    void Add@(Model.DomainObj)()
    {
         Navigation.NavigateTo("edit-@(Model.DomainVar)");
    }

    void Edit@(Model.DomainObj)(long id)
    {
         Navigation.NavigateTo($"edit-@(Model.DomainVar)/{id}");
    }
    
    private bool FilterFunc(@(Model.Namespace).@(Model.DomainObj) element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
            
        @foreach( var a in Model.Attributes)
        {
        <text>
        if (element.@(a.Name).ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        </text>
        }
        
        return false;
    }
}
