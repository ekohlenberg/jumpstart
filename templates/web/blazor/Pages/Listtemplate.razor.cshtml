@@page "/@(Model.DomainVar)"
@@using System.Net.Http;
@@using Microsoft.Extensions.DependencyInjection;
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@inject NavigationManager Navigation
@@rendermode @@(new InteractiveWebAssemblyRenderMode(prerender: false))
<PageTitle>@(Model.Label)</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">@(Model.Label)</MudText>

<MudText Typo="Typo.body1" Class="mb-4">This component demonstrates fetching @(Model.Label) data from the server.</MudText>

@@if (@(Model.DomainVar)List == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                @foreach( var a in @Model.Attributes)
                {
                <text>
                <th>@a.Label</th>
                </text>
            
                }

                <th></th>
            </tr>
        </thead>
        <tbody>
            @@foreach (var @(Model.DomainVar) in @(Model.DomainVar)List)
            {
                <tr>
                    @foreach( var a in @Model.Attributes)
                    {
                    <text>
                    <td>@@@(Model.DomainVar).@(a.Name).ToString()</td>
                    </text>
                    
                    }
                    <td><button class="btn btn-primary" @@onclick="@@(()=> Edit@(Model.DomainObj)(@@@(Model.DomainVar).id))">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
    <td><button class="btn btn-primary" @@onclick="@@(()=> Add@(Model.DomainObj)())">Add</button></td>
}

@@code {
    protected  @(Model.DomainObj)[]? @(Model.DomainVar)List;

    protected override async Task OnInitializedAsync()
    {
        var remoteClient = ClientFactory.CreateClient("RemoteAPI");

        @(Model.DomainVar)List = await remoteClient.GetFromJsonAsync<@(Model.DomainObj)[]>("api/@(Model.DomainVar)");
    }

    void Add@(Model.DomainObj)()
    {
        
        Navigation.NavigateTo("edit-@(Model.DomainVar)");
    }

    void Edit@(Model.DomainObj)(long id)
    {
<<<<<<< HEAD
         Navigation.NavigateTo($"edit-@(Model.DomainVar)/{id}");
    }
    
    private bool FilterFunc(@(Model.Namespace).@(Model.DomainObj) element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
            
        @foreach( var a in Model.Attributes)
        {
        <text>
        if (element.@(a.Name).ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        </text>
        }
        
        return false;
=======
        Navigation.NavigateTo($"edit-@(Model.DomainVar)/{id}");
>>>>>>> parent of e1796b66 (building - adding stored query and grid support)
    }


   
}
