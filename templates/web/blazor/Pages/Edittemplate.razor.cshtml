@@page "/edit-@(Model.DomainVar)"
@@page "/edit-@(Model.DomainVar)/{id:long}"
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@inject NavigationManager Navigation
@@rendermode @@(new InteractiveWebAssemblyRenderMode(prerender: false))
@@using System.Reflection
@@using Microsoft.AspNetCore.Components.Forms
@@using Microsoft.AspNetCore.Components
@@using @(Model.Namespace)

<style>
    .form-label {
        color: #6c757d !important;
        font-size: 0.875rem !important;
        font-weight: 500 !important;
        margin-bottom: 0.25rem !important;
        line-height: 1.2 !important;
    }
    .table td {
        padding: 1rem 0.5rem !important;
        vertical-align: top !important;
        height: auto !important;
        min-height: 5rem !important;
    }
    .form-control {
        border: 1px solid #ced4da !important;
        border-radius: 0.25rem !important;
        padding: 0.375rem 0.75rem !important;
        font-size: 1rem !important;
        line-height: 1.5 !important;
        background-color: #fff !important;
        box-shadow: none !important;
    }
    .form-control:focus {
        border-color: #80bdff !important;
        outline: 0 !important;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
    }
</style>

@@if(id == null)
{
	<h3>Create @(Model.Label)</h3>
}
else
{
	<h3>Edit @(Model.Label) @@(@(Model.DomainVar).getRwkString())</h3>
}


<EditForm Model="@(Model.DomainVar)" OnValidSubmit="HandleSubmit">
	<div class="form-group">
        <table class="table table-borderless">
            @@{
                var properties = GetEditableProperties();
                var propertiesPerRow = 3;
            }
            @@for (int i = 0; i < properties.Length; i += propertiesPerRow)
            {
                <tr>
                    @@for (int j = 0; j < propertiesPerRow && (i + j) < properties.Length; j++)
                    {
                        PropertyInfo? propInfo = null;
                        propInfo = properties[i + j];
                        <td>
                            <label for="@@propInfo.Name" class="form-label">@@GetPropertyLabel(propInfo)</label>
                            @@{
                                var propertyType = propInfo.PropertyType;
                                var isNullable = Nullable.GetUnderlyingType(propertyType) != null;
                                var underlyingType = isNullable ? Nullable.GetUnderlyingType(propertyType) : propertyType;
                            }
                            
                            @@if (IsEnumForeignKey(propInfo))
                            {
                                <select id="@@propInfo.Name" value="@@GetEnumProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetEnumProperty(propInfo, e.Value?.ToString()))" class="form-control">
                                    <option value="">-- Select --</option>
                                    @@if (enumData.ContainsKey(propInfo.Name))
                                    {
                                        @@foreach (var enumItem in enumData[propInfo.Name])
                                        {
                                            <option value="@@enumItem.id">@@enumItem.rwkString</option>
                                        }
                                    }
                                </select>
                            }
                            else if (underlyingType == typeof(string))
                            {
                                <input type="text" id="@@propInfo.Name" value="@@GetStringProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetStringProperty(propInfo, e.Value?.ToString()))" class="form-control" />
                            }
                            else if (underlyingType == typeof(int))
                            {
                                <input type="number" id="@@propInfo.Name" value="@@GetIntProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetIntProperty(propInfo, int.Parse(e.Value?.ToString() ?? "0")))" class="form-control" />
                            }
                            else if (underlyingType == typeof(int?))
                            {
                                <input type="number" id="@@propInfo.Name" value="@@GetNullableIntProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableIntProperty(propInfo, string.IsNullOrEmpty(e.Value?.ToString()) ? null : int.Parse(e.Value.ToString())))" class="form-control" />
                            }
                            else if (underlyingType == typeof(long))
                            {
                                <input type="number" id="@@propInfo.Name" value="@@GetLongProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetLongProperty(propInfo, long.Parse(e.Value?.ToString() ?? "0")))" class="form-control" />
                            }
                            else if (underlyingType == typeof(long?))
                            {
                                <input type="number" id="@@propInfo.Name" value="@@GetNullableLongProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableLongProperty(propInfo, string.IsNullOrEmpty(e.Value?.ToString()) ? null : long.Parse(e.Value.ToString())))" class="form-control" />
                            }
                            else if (underlyingType == typeof(decimal))
                            {
                                <input type="number" id="@@propInfo.Name" value="@@GetDecimalProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetDecimalProperty(propInfo, decimal.Parse(e.Value?.ToString() ?? "0")))" class="form-control" step="0.01" />
                            }
                            else if (underlyingType == typeof(decimal?))
                            {
                                <input type="number" id="@@propInfo.Name" value="@@GetNullableDecimalProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableDecimalProperty(propInfo, string.IsNullOrEmpty(e.Value?.ToString()) ? null : decimal.Parse(e.Value.ToString())))" class="form-control" step="0.01" />
                            }
                            else if (underlyingType == typeof(double))
                            {
                                <input type="number" id="@@propInfo.Name" value="@@GetDoubleProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetDoubleProperty(propInfo, double.Parse(e.Value?.ToString() ?? "0")))" class="form-control" step="0.01" />
                            }
                            else if (underlyingType == typeof(double?))
                            {
                                <input type="number" id="@@propInfo.Name" value="@@GetNullableDoubleProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableDoubleProperty(propInfo, string.IsNullOrEmpty(e.Value?.ToString()) ? null : double.Parse(e.Value.ToString())))" class="form-control" step="0.01" />
                            }
                            else if (underlyingType == typeof(bool))
                            {
                                <input type="checkbox" id="@@propInfo.Name" checked="@@GetBoolProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetBoolProperty(propInfo, bool.Parse(e.Value?.ToString() ?? "false")))" class="form-check-input" />
                            }
                            else if (underlyingType == typeof(bool?))
                            {
                                <input type="checkbox" id="@@propInfo.Name" checked="@@GetBoolProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetBoolProperty(propInfo, bool.Parse(e.Value?.ToString() ?? "false")))" class="form-check-input" />
                            }
                            else if (underlyingType == typeof(int) && propInfo.Name == "is_active")
                            {
                                <input type="checkbox" id="@@propInfo.Name" checked="@@GetIntAsBoolProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetIntAsBoolProperty(propInfo, bool.Parse(e.Value?.ToString() ?? "false")))" class="form-check-input" />
                            }
                            else if (underlyingType == typeof(DateTime))
                            {
                                <input type="date" id="@@propInfo.Name" value="@@GetDateTimeProperty(propInfo).ToString("yyyy-MM-dd")" @@onchange="@@(async (ChangeEventArgs e) => await SetDateTimeProperty(propInfo, DateTime.Parse(e.Value?.ToString() ?? DateTime.MinValue.ToString())))" class="form-control" />
                            }
                            else if (underlyingType == typeof(DateTime?))
                            {
                                <input type="date" id="@@propInfo.Name" value="@@(GetNullableDateTimeProperty(propInfo)?.ToString("yyyy-MM-dd") ?? "")" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableDateTimeProperty(propInfo, string.IsNullOrEmpty(e.Value?.ToString()) ? null : DateTime.Parse(e.Value.ToString())))" class="form-control" />
                            }
                            else if (underlyingType == typeof(DateOnly))
                            {
                                <input type="date" id="@@propInfo.Name" value="@@GetDateOnlyProperty(propInfo).ToString("yyyy-MM-dd")" @@onchange="@@(async (ChangeEventArgs e) => await SetDateOnlyProperty(propInfo, DateOnly.FromDateTime(DateTime.Parse(e.Value?.ToString() ?? DateTime.MinValue.ToString()))))" class="form-control" />
                            }
                            else if (underlyingType == typeof(DateOnly?))
                            {
                                <input type="date" id="@@propInfo.Name" value="@@(GetNullableDateOnlyProperty(propInfo)?.ToString("yyyy-MM-dd") ?? "")" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableDateOnlyProperty(propInfo, string.IsNullOrEmpty(e.Value?.ToString()) ? null : DateOnly.FromDateTime(DateTime.Parse(e.Value.ToString()))))" class="form-control" />
                            }
                            else
                            {
                                <input type="text" id="@@propInfo.Name" value="@@GetStringProperty(propInfo)" @@onchange="@@(async (ChangeEventArgs e) => await SetStringProperty(propInfo, e.Value?.ToString()))" class="form-control" />
                            }
                        </td>
                    }
                </tr>
            }
        </table>
        @*
        @@foreach (var property in GetReadOnlyProperties())
        {
            <div class="mb-3">
                <label class="form-label">@@GetPropertyLabel(property)</label>
                <div class="form-control-plaintext">@@GetPropertyValue(@(Model.DomainVar), property)?.ToString()</div>
            </div>
        }
        *@
	</div>
	
	<div class="mb-3">
		<button type="submit" class="btn btn-primary">Save</button>
		<button type="button" class="btn btn-secondary" @@onclick="Cancel">Cancel</button>
	</div>
</EditForm>

@@code {
	[Parameter]
	public long? id {get;set;}

	public @(Model.DomainObj) @(Model.DomainVar) {get;set;} = new @(Model.DomainObj)();
	
	// Dictionary to store enum data for dropdowns
	private Dictionary<string, List<EnumHelper>> enumData = new Dictionary<string, List<EnumHelper>>();

	protected override async Task OnParametersSetAsync()
	{
		if (id is not null) {
			var remoteClient = ClientFactory.CreateClient("RemoteAPI");
			var result = await remoteClient.GetFromJsonAsync<@(Model.DomainObj)>($"api/@(Model.DomainVar)/{id}");
			if (result is not null)
				@(Model.DomainVar) = result;
		}
		
		// Load enum data for dropdowns
		await LoadEnumData();
	}
	
	// Method to identify if a property is an enum foreign key
	private bool IsEnumForeignKey(System.Reflection.PropertyInfo propInfo)
	{
		var columnInfo = propInfo.GetCustomAttribute<ColumnInfoAttribute>();
		return columnInfo != null && 
			   !string.IsNullOrEmpty(columnInfo.fkObject) && 
			   !string.IsNullOrEmpty(columnInfo.fkType) &&
			   columnInfo.fkType.ToLower() == "enum";
	}
	
	// Method to load enum data for all enum foreign key properties
	private async Task LoadEnumData()
	{
		var enumProperties = GetEditableProperties().Where(IsEnumForeignKey);
		
		foreach (var propInfo in enumProperties)
		{
			var columnInfo = propInfo.GetCustomAttribute<ColumnInfoAttribute>();
			if (columnInfo != null && !string.IsNullOrEmpty(columnInfo.fkObject))
			{
				try
				{
					var remoteClient = ClientFactory.CreateClient("RemoteAPI");
					var enumItems = await remoteClient.GetFromJsonAsync<List<EnumHelper>>($"api/{columnInfo.fkObject.ToLower()}/enum");
					if (enumItems != null)
					{
						enumData[propInfo.Name] = enumItems;
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error loading enum data for {columnInfo.fkObject}: {ex.Message}");
				}
			}
		}
	}

	async Task HandleSubmit()
	{
		var remoteClient = ClientFactory.CreateClient("RemoteAPI");

		if (id is not null) {
			
			var result = await remoteClient.PutAsJsonAsync<@(Model.DomainObj)>($"api/@(Model.DomainVar)/{id}", @(Model.DomainVar));
			if (result.IsSuccessStatusCode)
			{
				var readResult = await result.Content.ReadFromJsonAsync<@(Model.DomainObj)>();
				if (readResult is not null) 
				{
					@(Model.DomainVar) = readResult;
				}
			}
		}
		else
		{
			var result = await remoteClient.PostAsJsonAsync<@(Model.DomainObj)>($"api/@(Model.DomainVar)", @(Model.DomainVar));	
			if (result.IsSuccessStatusCode)
			{
				var readResult = await result.Content.ReadFromJsonAsync<@(Model.DomainObj)>();
				if (readResult is not null)
				{
					@(Model.DomainVar) = readResult;
				}
			}
		}
		
		// Navigate back to list after successful save
		Navigation.NavigateTo("/@(Model.DomainVar)");
	}

	void Cancel()
	{
		Navigation.NavigateTo("/@(Model.DomainVar)");
	}

	// Helper methods using ReflectionHelper
	private System.Reflection.PropertyInfo[] GetEditableProperties()
	{
		return ReflectionHelper.GetDisplayProperties<@(Model.DomainObj)>();
	}

	private System.Reflection.PropertyInfo[] GetReadOnlyProperties()
	{
		// Get properties that have ColumnInfoAttribute but are typically read-only (like created_date, last_updated, etc.)
		var allLabeled = ReflectionHelper.GetAllLabeledProperties<@(Model.DomainObj)>();
		var editable = GetEditableProperties();
		
		return allLabeled.Except(editable)
						.Where(p => p.Name.ToLower().Contains("created") || 
								   p.Name.ToLower().Contains("updated") || 
								   p.Name.ToLower().Contains("version") ||
								   p.Name.ToLower() == "id")
						.ToArray();
	}

	private string GetPropertyLabel(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyLabel(propInfo);
	}

	// Property-based getters and setters for bind-Value
	private string GetStringProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsString(@(Model.DomainVar), propInfo);
	}

	private async Task SetStringProperty(System.Reflection.PropertyInfo propInfo, string value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private int GetIntProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsInt(@(Model.DomainVar), propInfo);
	}

	private async Task SetIntProperty(System.Reflection.PropertyInfo propInfo, int value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private int? GetNullableIntProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableInt(@(Model.DomainVar), propInfo);
	}

	private async Task SetNullableIntProperty(System.Reflection.PropertyInfo propInfo, int? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private long GetLongProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsLong(@(Model.DomainVar), propInfo);
	}

	private async Task SetLongProperty(System.Reflection.PropertyInfo propInfo, long value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private long? GetNullableLongProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableLong(@(Model.DomainVar), propInfo);
	}

	private async Task SetNullableLongProperty(System.Reflection.PropertyInfo propInfo, long? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private decimal GetDecimalProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsDecimal(@(Model.DomainVar), propInfo);
	}

	private async Task SetDecimalProperty(System.Reflection.PropertyInfo propInfo, decimal value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private decimal? GetNullableDecimalProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDecimal(@(Model.DomainVar), propInfo);
	}

	private async Task SetNullableDecimalProperty(System.Reflection.PropertyInfo propInfo, decimal? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private double GetDoubleProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsDouble(@(Model.DomainVar), propInfo);
	}

	private async Task SetDoubleProperty(System.Reflection.PropertyInfo propInfo, double value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private double? GetNullableDoubleProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDouble(@(Model.DomainVar), propInfo);
	}

	private async Task SetNullableDoubleProperty(System.Reflection.PropertyInfo propInfo, double? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private bool GetBoolProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsBool(@(Model.DomainVar), propInfo);
	}

	private async Task SetBoolProperty(System.Reflection.PropertyInfo propInfo, bool value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private bool? GetNullableBoolProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableBool(@(Model.DomainVar), propInfo);
	}

	private async Task SetNullableBoolProperty(System.Reflection.PropertyInfo propInfo, bool? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private DateTime GetDateTimeProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsDateTime(@(Model.DomainVar), propInfo);
	}

	private async Task SetDateTimeProperty(System.Reflection.PropertyInfo propInfo, DateTime value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private DateTime? GetNullableDateTimeProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDateTime(@(Model.DomainVar), propInfo);
	}

	private async Task SetNullableDateTimeProperty(System.Reflection.PropertyInfo propInfo, DateTime? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private DateOnly GetDateOnlyProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsDateOnly(@(Model.DomainVar), propInfo);
	}

	private async Task SetDateOnlyProperty(System.Reflection.PropertyInfo propInfo, DateOnly value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private DateOnly? GetNullableDateOnlyProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDateOnly(@(Model.DomainVar), propInfo);
	}

	private async Task SetNullableDateOnlyProperty(System.Reflection.PropertyInfo propInfo, DateOnly? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	// Special handling for int properties that should be displayed as booleans (like is_active)
	private bool GetIntAsBoolProperty(System.Reflection.PropertyInfo propInfo)
	{
		var intValue = ReflectionHelper.GetPropertyValueAsInt(@(Model.DomainVar), propInfo);
		return intValue != 0;
	}

	private async Task SetIntAsBoolProperty(System.Reflection.PropertyInfo propInfo, bool value)
	{
		propInfo.SetValue(@(Model.DomainVar), value ? 1 : 0);
		await InvokeAsync(StateHasChanged);
	}
	
	// Enum foreign key property getter and setter
	private string GetEnumProperty(System.Reflection.PropertyInfo propInfo)
	{
		var value = propInfo.GetValue(@(Model.DomainVar));
		return value?.ToString() ?? "";
	}
	
	private async Task SetEnumProperty(System.Reflection.PropertyInfo propInfo, string value)
	{
		if (string.IsNullOrEmpty(value))
		{
			propInfo.SetValue(@(Model.DomainVar), null);
		}
		else
		{
			// Try to parse as long (for ID values)
			if (long.TryParse(value, out long longValue))
			{
				propInfo.SetValue(@(Model.DomainVar), longValue);
			}
			else
			{
				propInfo.SetValue(@(Model.DomainVar), value);
			}
		}
		await InvokeAsync(StateHasChanged);
	}
}   
