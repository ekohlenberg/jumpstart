@@page "/edit-@(Model.DomainVar)"
@@page "/edit-@(Model.DomainVar)/{id:long}"
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@rendermode @@(new InteractiveWebAssemblyRenderMode(prerender: false))

@@if(id == null)
{
	<h3>Create @(Model.Label)</h3>
}
else
{
	<h3>Edit @(Model.Label) @@@(Model.DomainVar).getRwkString() </h3>
}

<EditForm Model="@(Model.DomainVar)" onsubmit="HandleSubmit">
	@@{
		Console.WriteLine("rendering");
	}
	<div>
        <table>
            @foreach(var a in Model.UserAttributes)
            {
                <text>
                <tr>
                <td><label for="@(a.Name)">@a.Label</label></td>
		        <td><Input@(a.InputType) id="@(a.Name)" @@bind-Value="@(Model.DomainVar).@(a.Name)" class="form-control" /></td>
                </tr>
                </text>
            }
		
			@foreach(var g in Model.GlobalAttributes)
			{
				<text>
				<tr>
					<td>@(g.Label)</td><td>@@(@(Model.DomainVar).@(g.Name).ToString())</td>
				</tr>
				</text>
			}
			
		</table>
	</div>
	<button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@@code {
	[Parameter]
	public long? id {get;set;}

	public @(Model.Namespace).@(Model.DomainObj) @(Model.DomainVar) {get;set;} = new @(Model.Namespace).@(Model.DomainObj)();

	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("getting data");
		if (id is not null) {
			var remoteClient = ClientFactory.CreateClient("RemoteAPI");
		var result = await remoteClient.GetFromJsonAsync<@(Model.Namespace).@(Model.DomainObj)>($"api/@(Model.DomainVar)/{id}");
		if (result is not null)
			@(Model.DomainVar) = result;
		}
	
	}

	async Task  HandleSubmit()
	{
		var remoteClient = ClientFactory.CreateClient("RemoteAPI");

		if (id is not null) {
			
			var result = await remoteClient.PutAsJsonAsync<@(Model.Namespace).@(Model.DomainObj)>($"api/@(Model.DomainVar)/{id}", @(Model.DomainVar));
				if (result is not null)
				{
					var readResult = await result.Content.ReadFromJsonAsync<@(Model.Namespace).@(Model.DomainObj)>();
					if (readResult is not null) 
					{
						@(Model.DomainVar) = readResult;
					}
				}
		}
		else
		{
			var result = await remoteClient.PostAsJsonAsync<@(Model.Namespace).@(Model.DomainObj)>($"api/@(Model.DomainVar)", @(Model.DomainVar));	
			if (result is not null)
				{
					var readResult = await result.Content.ReadFromJsonAsync<@(Model.Namespace).@(Model.DomainObj)>();
					if (readResult is not null)
					{
						@(Model.DomainVar) = readResult;
					}
				}
		}

	}
}   
