@@page "/edit-@(Model.DomainVar)"
@@page "/edit-@(Model.DomainVar)/{id:long}"
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@inject NavigationManager Navigation
@@rendermode @@(new InteractiveWebAssemblyRenderMode(prerender: false))
@@using System.Reflection
@@using Microsoft.AspNetCore.Components.Forms
@@using Microsoft.AspNetCore.Components

@@if(id == null)
{
	<h3>Create @(Model.Label)</h3>
}
else
{
	<h3>Edit @(Model.Label) @(Model.DomainVar).getRwkString() @(Model.DomainVar).id	</h3>
}

<EditForm Model="@(Model.DomainVar)" OnValidSubmit="HandleSubmit">
	<div class="form-group">
        @@foreach (var property in GetEditableProperties())
        {
            <div class="mb-3">
                <label for="@@property.Name" class="form-label">@@GetPropertyLabel(property)</label>
                @@{
                    var propertyType = property.PropertyType;
                    var isNullable = Nullable.GetUnderlyingType(propertyType) != null;
                    var underlyingType = isNullable ? Nullable.GetUnderlyingType(propertyType) : propertyType;
                }
                
                @@if (underlyingType == typeof(string))
                {
                    <input type="text" id="@@property.Name" value="@@GetStringProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetStringProperty(property, e.Value?.ToString()))" class="form-control" />
                }
                else if (underlyingType == typeof(int))
                {
                    <input type="number" id="@@property.Name" value="@@GetIntProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetIntProperty(property, int.Parse(e.Value?.ToString() ?? "0")))" class="form-control" />
                }
                else if (underlyingType == typeof(int?))
                {
                    <input type="number" id="@@property.Name" value="@@GetNullableIntProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableIntProperty(property, string.IsNullOrEmpty(e.Value?.ToString()) ? null : int.Parse(e.Value.ToString())))" class="form-control" />
                }
                else if (underlyingType == typeof(long))
                {
                    <input type="number" id="@@property.Name" value="@@GetLongProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetLongProperty(property, long.Parse(e.Value?.ToString() ?? "0")))" class="form-control" />
                }
                else if (underlyingType == typeof(long?))
                {
                    <input type="number" id="@@property.Name" value="@@GetNullableLongProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableLongProperty(property, string.IsNullOrEmpty(e.Value?.ToString()) ? null : long.Parse(e.Value.ToString())))" class="form-control" />
                }
                else if (underlyingType == typeof(decimal))
                {
                    <input type="number" id="@@property.Name" value="@@GetDecimalProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetDecimalProperty(property, decimal.Parse(e.Value?.ToString() ?? "0")))" class="form-control" step="0.01" />
                }
                else if (underlyingType == typeof(decimal?))
                {
                    <input type="number" id="@@property.Name" value="@@GetNullableDecimalProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableDecimalProperty(property, string.IsNullOrEmpty(e.Value?.ToString()) ? null : decimal.Parse(e.Value.ToString())))" class="form-control" step="0.01" />
                }
                else if (underlyingType == typeof(double))
                {
                    <input type="number" id="@@property.Name" value="@@GetDoubleProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetDoubleProperty(property, double.Parse(e.Value?.ToString() ?? "0")))" class="form-control" step="0.01" />
                }
                else if (underlyingType == typeof(double?))
                {
                    <input type="number" id="@@property.Name" value="@@GetNullableDoubleProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableDoubleProperty(property, string.IsNullOrEmpty(e.Value?.ToString()) ? null : double.Parse(e.Value.ToString())))" class="form-control" step="0.01" />
                }
                else if (underlyingType == typeof(bool))
                {
                    <input type="checkbox" id="@@property.Name" checked="@@GetBoolProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetBoolProperty(property, bool.Parse(e.Value?.ToString() ?? "false")))" class="form-check-input" />
                }
                else if (underlyingType == typeof(bool?))
                {
                    <input type="checkbox" id="@@property.Name" checked="@@GetBoolProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetBoolProperty(property, bool.Parse(e.Value?.ToString() ?? "false")))" class="form-check-input" />
                }
                else if (underlyingType == typeof(int) && property.Name == "is_active")
                {
                    <input type="checkbox" id="@@property.Name" checked="@@GetIntAsBoolProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetIntAsBoolProperty(property, bool.Parse(e.Value?.ToString() ?? "false")))" class="form-check-input" />
                }
                else if (underlyingType == typeof(DateTime))
                {
                    <input type="date" id="@@property.Name" value="@@GetDateTimeProperty(property).ToString("yyyy-MM-dd")" @@onchange="@@(async (ChangeEventArgs e) => await SetDateTimeProperty(property, DateTime.Parse(e.Value?.ToString() ?? DateTime.MinValue.ToString())))" class="form-control" />
                }
                else if (underlyingType == typeof(DateTime?))
                {
                    <input type="date" id="@@property.Name" value="@@(GetNullableDateTimeProperty(property)?.ToString("yyyy-MM-dd") ?? "")" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableDateTimeProperty(property, string.IsNullOrEmpty(e.Value?.ToString()) ? null : DateTime.Parse(e.Value.ToString())))" class="form-control" />
                }
                else if (underlyingType == typeof(DateOnly))
                {
                    <input type="date" id="@@property.Name" value="@@GetDateOnlyProperty(property).ToString("yyyy-MM-dd")" @@onchange="@@(async (ChangeEventArgs e) => await SetDateOnlyProperty(property, DateOnly.FromDateTime(DateTime.Parse(e.Value?.ToString() ?? DateTime.MinValue.ToString()))))" class="form-control" />
                }
                else if (underlyingType == typeof(DateOnly?))
                {
                    <input type="date" id="@@property.Name" value="@@(GetNullableDateOnlyProperty(property)?.ToString("yyyy-MM-dd") ?? "")" @@onchange="@@(async (ChangeEventArgs e) => await SetNullableDateOnlyProperty(property, string.IsNullOrEmpty(e.Value?.ToString()) ? null : DateOnly.FromDateTime(DateTime.Parse(e.Value.ToString()))))" class="form-control" />
                }
                else
                {
                    <input type="text" id="@@property.Name" value="@@GetStringProperty(property)" @@onchange="@@(async (ChangeEventArgs e) => await SetStringProperty(property, e.Value?.ToString()))" class="form-control" />
                }
            </div>
        }
        @*
        @@foreach (var property in GetReadOnlyProperties())
        {
            <div class="mb-3">
                <label class="form-label">@@GetPropertyLabel(property)</label>
                <div class="form-control-plaintext">@@GetPropertyValue(@(Model.DomainVar), property)?.ToString()</div>
            </div>
        }
        *@
	</div>
	
	<div class="mb-3">
		<button type="submit" class="btn btn-primary">Save</button>
		<button type="button" class="btn btn-secondary" @@onclick="Cancel">Cancel</button>
	</div>
</EditForm>

@@code {
	[Parameter]
	public long? id {get;set;}

	public @(Model.DomainObj)View @(Model.DomainVar) {get;set;} = new @(Model.DomainObj)View();

	protected override async Task OnParametersSetAsync()
	{
		if (id is not null) {
			var remoteClient = ClientFactory.CreateClient("RemoteAPI");
			var result = await remoteClient.GetFromJsonAsync<@(Model.DomainObj)View>($"api/@(Model.DomainVar)/{id}");
			if (result is not null)
				@(Model.DomainVar) = result;
		}
	}

	async Task HandleSubmit()
	{
		var remoteClient = ClientFactory.CreateClient("RemoteAPI");

		if (id is not null) {
			
			var result = await remoteClient.PutAsJsonAsync<@(Model.DomainObj)View>($"api/@(Model.DomainVar)/{id}", @(Model.DomainVar));
			if (result.IsSuccessStatusCode)
			{
				var readResult = await result.Content.ReadFromJsonAsync<@(Model.DomainObj)View>();
				if (readResult is not null) 
				{
					@(Model.DomainVar) = readResult;
				}
			}
		}
		else
		{
			var result = await remoteClient.PostAsJsonAsync<@(Model.DomainObj)View>($"api/@(Model.DomainVar)", @(Model.DomainVar));	
			if (result.IsSuccessStatusCode)
			{
				var readResult = await result.Content.ReadFromJsonAsync<@(Model.DomainObj)View>();
				if (readResult is not null)
				{
					@(Model.DomainVar) = readResult;
				}
			}
		}
		
		// Navigate back to list after successful save
		Navigation.NavigateTo("/@(Model.DomainVar)");
	}

	void Cancel()
	{
		Navigation.NavigateTo("/@(Model.DomainVar)");
	}

	// Helper methods using ReflectionHelper
	private System.Reflection.PropertyInfo[] GetEditableProperties()
	{
		return ReflectionHelper.GetDisplayProperties<@(Model.DomainObj)View>();
	}

	private System.Reflection.PropertyInfo[] GetReadOnlyProperties()
	{
		// Get properties that have LabelAttribute but are typically read-only (like created_date, last_updated, etc.)
		var allLabeled = ReflectionHelper.GetAllLabeledProperties<@(Model.DomainObj)View>();
		var editable = GetEditableProperties();
		
		return allLabeled.Except(editable)
						.Where(p => p.Name.ToLower().Contains("created") || 
								   p.Name.ToLower().Contains("updated") || 
								   p.Name.ToLower().Contains("version") ||
								   p.Name.ToLower() == "id")
						.ToArray();
	}

	private string GetPropertyLabel(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyLabel(property);
	}

	// Property-based getters and setters for bind-Value
	private string GetStringProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsString(@(Model.DomainVar), property);
	}

	private async Task SetStringProperty(System.Reflection.PropertyInfo property, string value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private int GetIntProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsInt(@(Model.DomainVar), property);
	}

	private async Task SetIntProperty(System.Reflection.PropertyInfo property, int value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private int? GetNullableIntProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsNullableInt(@(Model.DomainVar), property);
	}

	private async Task SetNullableIntProperty(System.Reflection.PropertyInfo property, int? value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private long GetLongProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsLong(@(Model.DomainVar), property);
	}

	private async Task SetLongProperty(System.Reflection.PropertyInfo property, long value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private long? GetNullableLongProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsNullableLong(@(Model.DomainVar), property);
	}

	private async Task SetNullableLongProperty(System.Reflection.PropertyInfo property, long? value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private decimal GetDecimalProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsDecimal(@(Model.DomainVar), property);
	}

	private async Task SetDecimalProperty(System.Reflection.PropertyInfo property, decimal value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private decimal? GetNullableDecimalProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDecimal(@(Model.DomainVar), property);
	}

	private async Task SetNullableDecimalProperty(System.Reflection.PropertyInfo property, decimal? value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private double GetDoubleProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsDouble(@(Model.DomainVar), property);
	}

	private async Task SetDoubleProperty(System.Reflection.PropertyInfo property, double value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private double? GetNullableDoubleProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDouble(@(Model.DomainVar), property);
	}

	private async Task SetNullableDoubleProperty(System.Reflection.PropertyInfo property, double? value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private bool GetBoolProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsBool(@(Model.DomainVar), property);
	}

	private async Task SetBoolProperty(System.Reflection.PropertyInfo property, bool value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private bool? GetNullableBoolProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsNullableBool(@(Model.DomainVar), property);
	}

	private async Task SetNullableBoolProperty(System.Reflection.PropertyInfo property, bool? value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private DateTime GetDateTimeProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsDateTime(@(Model.DomainVar), property);
	}

	private async Task SetDateTimeProperty(System.Reflection.PropertyInfo property, DateTime value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private DateTime? GetNullableDateTimeProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDateTime(@(Model.DomainVar), property);
	}

	private async Task SetNullableDateTimeProperty(System.Reflection.PropertyInfo property, DateTime? value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private DateOnly GetDateOnlyProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsDateOnly(@(Model.DomainVar), property);
	}

	private async Task SetDateOnlyProperty(System.Reflection.PropertyInfo property, DateOnly value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private DateOnly? GetNullableDateOnlyProperty(System.Reflection.PropertyInfo property)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDateOnly(@(Model.DomainVar), property);
	}

	private async Task SetNullableDateOnlyProperty(System.Reflection.PropertyInfo property, DateOnly? value)
	{
		property.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	// Special handling for int properties that should be displayed as booleans (like is_active)
	private bool GetIntAsBoolProperty(System.Reflection.PropertyInfo property)
	{
		var intValue = ReflectionHelper.GetPropertyValueAsInt(@(Model.DomainVar), property);
		return intValue != 0;
	}

	private async Task SetIntAsBoolProperty(System.Reflection.PropertyInfo property, bool value)
	{
		property.SetValue(@(Model.DomainVar), value ? 1 : 0);
		await InvokeAsync(StateHasChanged);
	}
}   
