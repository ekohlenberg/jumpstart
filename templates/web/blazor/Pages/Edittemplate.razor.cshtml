@@page "/edit-@(Model.DomainVar)"
@@page "/edit-@(Model.DomainVar)/{id:long}"
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@inject NavigationManager Navigation
@@rendermode @@(new InteractiveWebAssemblyRenderMode(prerender: false))
@@using System.Reflection
@@using Microsoft.AspNetCore.Components.Forms
@@using Microsoft.AspNetCore.Components
@@using @(Model.Namespace)
@@using @(Model.Namespace).Components

<style>
    .form-label {
        color: #6c757d !important;
        font-size: 0.875rem !important;
        font-weight: 500 !important;
        margin-bottom: 0.25rem !important;
        padding-top: 0.25rem !important;
    }
    .form-control {
        border: 1px solid #ced4da !important;
        border-radius: 0.25rem !important;
        padding: 0.375rem 0.75rem !important;
        font-size: 1rem !important;
        line-height: 1.5 !important;
        background-color: #fff !important;
        box-shadow: none !important;
    }
    .form-control:focus {
        border-color: #80bdff !important;
        outline: 0 !important;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
    }
</style>

@@if(id == null)
{
	<h3>Create @(Model.Label)</h3>
}
else
{
	<h3>Edit @(Model.Label) @@(@(Model.DomainVar).getRwkString())</h3>
}

<TabControl Id="editTabs" Tabs="@@editTabs" ActiveTab="@@activeTabIndex" OnTabChanged="@@OnTabChanged" />

@@code {
	[Parameter]
	public long? id {get;set;}

	public @(Model.DomainObj) @(Model.DomainVar) {get;set;} = new @(Model.DomainObj)();
	
	// History data
	private @(Model.DomainObj)History[]? @(Model.DomainVar)HistoryList;
	
@{
	// Get all child relationships
	var children = Model.Children;
	
	if (children.Count > 0)
	{
		foreach(var child in children)
		{
			var childObject = child.Object;
			var childRole = child.Role;
			var childDomainObj = childObject.DomainObj;
			var childDomainVar = childObject.DomainVar;
			
			<text>
	// Child data for @(childRole)
	private @(childDomainObj)[]? @(childDomainVar)List;
			</text>
		}
	}
}
	
	// Dictionary to store enum data for dropdowns
	private Dictionary<string, List<EnumHelper>> enumData = new Dictionary<string, List<EnumHelper>>();
	
	// Tab management
	private List<TabItem> editTabs = new();
	private int activeTabIndex = 0;

	protected override async Task OnParametersSetAsync()
	{
		if (id is not null) {
			var remoteClient = ClientFactory.CreateClient("RemoteAPI");
			var result = await remoteClient.GetFromJsonAsync<@(Model.DomainObj)>($"api/@(Model.DomainVar)/{id}");
			if (result is not null)
				@(Model.DomainVar) = result;
				
			// Load history data
			await LoadHistoryData();
			
			// Load child data
			await LoadChildData();
		}
	
		// Load enum data for dropdowns
		await LoadEnumData();
		InitializeTabs();
	}
	
	private void InitializeTabs()
	{
		editTabs = new List<TabItem>
		{
			new TabItem 
			{ 
				Title = "Edit",
				Content = CreateEditTabContent()
			},
			new TabItem 
			{ 
				Title = "History",
				Content = CreateHistoryTabContent()
			}
@{

	
	if (children.Count > 0)
	{
		foreach(var child in children)
		{
			var childObject = child.Object;
			var childRole = child.Role;
			var childLabel = child.Label;
			var childDomainObj = childObject.DomainObj;
			var childDomainVar = childObject.DomainVar;
			
			<text>
			,
			new TabItem 
			{ 
				Title = "@(childDomainObj) @(childRole)",
				Content = Create@(childDomainVar)_@(childRole)TabContent()
			}
			</text>
		}
	}
}
		};
	}
	
	private RenderFragment CreateEditTabContent() => builder =>
	{
		builder.OpenComponent<EditForm>(0);
		builder.AddAttribute(1, "Model", @(Model.DomainVar));
		builder.AddAttribute(2, "OnValidSubmit", EventCallback.Factory.Create<EditContext>(this, HandleSubmit));
		builder.AddAttribute(3, "ChildContent", (RenderFragment<EditContext>)(context => editBuilder =>
		{
			editBuilder.OpenElement(4, "div");
			editBuilder.AddAttribute(5, "class", "form-group");
			
			// Add the form table content here
			editBuilder.OpenElement(6, "table");
			editBuilder.AddAttribute(7, "class", "table table-borderless");
			
			// Generate dynamic form fields
			var properties = GetEditableProperties();
			var propertiesPerRow = 3;
			
			for (int i = 0; i < properties.Length; i += propertiesPerRow)
			{
				editBuilder.OpenElement(8 + i, "tr");
				
				for (int j = 0; j < propertiesPerRow && (i + j) < properties.Length; j++)
				{
					var propInfo = properties[i + j];
					editBuilder.OpenElement(9 + i + j, "td");
					editBuilder.AddAttribute(10 + i + j, "style", "width: 33%; padding: 0.5rem;");
					
					// Label
					editBuilder.OpenElement(11 + i + j, "div");
					editBuilder.AddAttribute(12 + i + j, "class", "mb-2");
					
					editBuilder.OpenElement(13 + i + j, "label");
					editBuilder.AddAttribute(14 + i + j, "for", propInfo.Name);
					editBuilder.AddAttribute(15 + i + j, "class", "form-label");
					editBuilder.AddContent(16 + i + j, GetPropertyLabel(propInfo));
					editBuilder.CloseElement(); // label
					
					// Input field based on type
					var underlyingType = Nullable.GetUnderlyingType(propInfo.PropertyType) ?? propInfo.PropertyType;
					
					if (IsEnumForeignKey(propInfo))
					{
						// Enum dropdown
						editBuilder.OpenElement(17 + i + j, "select");
						editBuilder.AddAttribute(18 + i + j, "id", propInfo.Name);
						editBuilder.AddAttribute(19 + i + j, "class", "form-control");
						editBuilder.AddAttribute(20 + i + j, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async (e) => await SetEnumProperty(propInfo, e.Value?.ToString() ?? "")));
						
						editBuilder.OpenElement(21 + i + j, "option");
						editBuilder.AddAttribute(22 + i + j, "value", "");
						editBuilder.AddContent(23 + i + j, "-- Select --");
						editBuilder.CloseElement(); // option
						
						if (enumData.ContainsKey(propInfo.Name))
						{
							var currentValue = GetEnumProperty(propInfo);
							foreach (var enumItem in enumData[propInfo.Name])
							{
								editBuilder.OpenElement(24 + i + j, "option");
								editBuilder.AddAttribute(25 + i + j, "value", enumItem.id.ToString());
								if (enumItem.id == currentValue)
								{
									editBuilder.AddAttribute(26 + i + j, "selected", "selected");
								}
								editBuilder.AddContent(27 + i + j, enumItem.rwkString);
								editBuilder.CloseElement(); // option
							}
						}
						
						editBuilder.CloseElement(); // select
					}
					else if (underlyingType == typeof(string))
					{
						editBuilder.OpenElement(17 + i + j, "input");
						editBuilder.AddAttribute(18 + i + j, "type", "text");
						editBuilder.AddAttribute(19 + i + j, "id", propInfo.Name);
						editBuilder.AddAttribute(20 + i + j, "value", GetStringProperty(propInfo));
						editBuilder.AddAttribute(21 + i + j, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async (e) => await SetStringProperty(propInfo, e.Value?.ToString() ?? "")));
						editBuilder.AddAttribute(22 + i + j, "class", "form-control");
						editBuilder.CloseElement(); // input
					}
					else if (underlyingType == typeof(int))
					{
						editBuilder.OpenElement(17 + i + j, "input");
						editBuilder.AddAttribute(18 + i + j, "type", "number");
						editBuilder.AddAttribute(19 + i + j, "id", propInfo.Name);
						editBuilder.AddAttribute(20 + i + j, "value", GetIntProperty(propInfo).ToString());
						editBuilder.AddAttribute(21 + i + j, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async (e) => await SetIntProperty(propInfo, int.TryParse(e.Value?.ToString(), out var val) ? val : 0)));
						editBuilder.AddAttribute(22 + i + j, "class", "form-control");
						editBuilder.CloseElement(); // input
					}
					else if (underlyingType == typeof(long))
					{
						editBuilder.OpenElement(17 + i + j, "input");
						editBuilder.AddAttribute(18 + i + j, "type", "number");
						editBuilder.AddAttribute(19 + i + j, "id", propInfo.Name);
						editBuilder.AddAttribute(20 + i + j, "value", GetLongProperty(propInfo).ToString());
						editBuilder.AddAttribute(21 + i + j, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async (e) => await SetLongProperty(propInfo, long.TryParse(e.Value?.ToString(), out var val) ? val : 0)));
						editBuilder.AddAttribute(22 + i + j, "class", "form-control");
						editBuilder.CloseElement(); // input
					}
					else if (underlyingType == typeof(bool))
					{
						editBuilder.OpenElement(17 + i + j, "input");
						editBuilder.AddAttribute(18 + i + j, "type", "checkbox");
						editBuilder.AddAttribute(19 + i + j, "id", propInfo.Name);
						editBuilder.AddAttribute(20 + i + j, "checked", GetBoolProperty(propInfo));
						editBuilder.AddAttribute(21 + i + j, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async (e) => await SetBoolProperty(propInfo, bool.TryParse(e.Value?.ToString(), out var val) ? val : false)));
						editBuilder.AddAttribute(22 + i + j, "class", "form-check-input");
						editBuilder.CloseElement(); // input
					}
					else if (underlyingType == typeof(DateTime))
					{
						editBuilder.OpenElement(17 + i + j, "input");
						editBuilder.AddAttribute(18 + i + j, "type", "date");
						editBuilder.AddAttribute(19 + i + j, "id", propInfo.Name);
						editBuilder.AddAttribute(20 + i + j, "value", GetDateTimeProperty(propInfo).ToString("yyyy-MM-dd"));
						editBuilder.AddAttribute(21 + i + j, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async (e) => await SetDateTimeProperty(propInfo, DateTime.Parse(e.Value?.ToString() ?? DateTime.MinValue.ToString()))));
						editBuilder.AddAttribute(22 + i + j, "class", "form-control");
						editBuilder.CloseElement(); // input
					}
					else
					{
						// Default to string input
						editBuilder.OpenElement(17 + i + j, "input");
						editBuilder.AddAttribute(18 + i + j, "type", "text");
						editBuilder.AddAttribute(19 + i + j, "id", propInfo.Name);
						editBuilder.AddAttribute(20 + i + j, "value", GetStringProperty(propInfo));
						editBuilder.AddAttribute(21 + i + j, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async (e) => await SetStringProperty(propInfo, e.Value?.ToString() ?? "")));
						editBuilder.AddAttribute(22 + i + j, "class", "form-control");
						editBuilder.CloseElement(); // input
					}
					
					editBuilder.CloseElement(); // div mb-2
					editBuilder.CloseElement(); // td
				}
				
				editBuilder.CloseElement(); // tr
			}
			
			editBuilder.CloseElement(); // table
			editBuilder.CloseElement(); // div
			
			// Add buttons
			editBuilder.OpenElement(9, "div");
			editBuilder.AddAttribute(10, "class", "mb-3");
			
			editBuilder.OpenElement(11, "button");
			editBuilder.AddAttribute(12, "type", "submit");
			editBuilder.AddAttribute(13, "class", "btn btn-primary");
			editBuilder.AddContent(14, "Save");
			editBuilder.CloseElement(); // button
			
			editBuilder.OpenElement(15, "button");
			editBuilder.AddAttribute(16, "type", "button");
			editBuilder.AddAttribute(17, "class", "btn btn-secondary");
			editBuilder.AddAttribute(18, "onclick", EventCallback.Factory.Create(this, Cancel));
			editBuilder.AddContent(19, "Cancel");
			editBuilder.CloseElement(); // button
			
			editBuilder.CloseElement(); // div
		}));
		builder.CloseComponent(); // EditForm
	};
	
	private RenderFragment CreateHistoryTabContent() => builder =>
	{
		builder.OpenElement(0, "div");
		builder.AddAttribute(1, "class", "mt-3");
		
		// Add debug info
		builder.OpenElement(2, "div");
		builder.AddAttribute(3, "class", "alert alert-info");
		builder.AddContent(4, $"History records: {@(Model.DomainVar)HistoryList?.Length ?? 0}");
		builder.CloseElement(); // div
		
		// Add DataTable component
		builder.OpenComponent<DataTable>(5);
		builder.AddAttribute(6, "Data", @(Model.DomainVar)HistoryList);
		builder.AddAttribute(7, "DataType", typeof(@(Model.DomainObj)History));
		builder.AddAttribute(8, "ShowActions", false);
		builder.AddAttribute(9, "ShowAddButton", false);
		builder.CloseComponent(); // DataTable
		
		builder.CloseElement(); // div
	};

@{
	// Get all child relationships
	
	
	if (children.Count > 0)
	{
		foreach(var child in children)
		{
			var childObject = child.Object;
			var childRole = child.Role;
			var childLabel = child.Label;
			var childDomainObj = childObject.DomainObj;
			var childDomainVar = childObject.DomainVar;
			
			<text>
	private RenderFragment Create@(childDomainVar)_@(childRole)TabContent() => builder =>
	{
		builder.OpenElement(0, "div");
		builder.AddAttribute(1, "class", "mt-3");
		
		// Add debug info
		builder.OpenElement(2, "div");
		builder.AddAttribute(3, "class", "alert alert-info");
		builder.AddContent(4, $"@(childLabel) records: {@(childDomainVar)List?.Length ?? 0}");
		builder.CloseElement(); // div
		
		// Add DataTable component
		builder.OpenComponent<DataTable>(5);
		builder.AddAttribute(6, "Data", @(childDomainVar)List);
		builder.AddAttribute(7, "DataType", typeof(@(childDomainObj)));
		builder.AddAttribute(8, "ShowActions", false);
		builder.AddAttribute(9, "ShowAddButton", false);
		builder.CloseComponent(); // DataTable
		
		builder.CloseElement(); // div
	};

			</text>
		}
	}
}
	
	// Method to identify if a property is an enum foreign key
	private bool IsEnumForeignKey(System.Reflection.PropertyInfo propInfo)
	{
		var columnInfo = propInfo.GetCustomAttribute<ColumnInfoAttribute>();
		return columnInfo != null && 
			   !string.IsNullOrEmpty(columnInfo.fkObject) && 
			   !string.IsNullOrEmpty(columnInfo.fkType) &&
			   columnInfo.fkType.ToLower() == "enum";
	}

	// Load enum data for dropdowns
	private async Task LoadEnumData()
	{
		try
		{
			var remoteClient = ClientFactory.CreateClient("RemoteAPI");
			var properties = GetEditableProperties();
			
			foreach (var propInfo in properties)
			{
				if (IsEnumForeignKey(propInfo))
				{
					var columnInfo = propInfo.GetCustomAttribute<ColumnInfoAttribute>();
					if (columnInfo != null && !string.IsNullOrEmpty(columnInfo.fkObject))
					{
						var enumDataResult = await remoteClient.GetFromJsonAsync<List<EnumHelper>>($"api/{columnInfo.fkObject.ToLower()}/enum");
						if (enumDataResult != null)
						{
							enumData[propInfo.Name] = enumDataResult;
						}
					}
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading enum data: {ex.Message}");
		}
	}

	private async Task LoadHistoryData()
	{
		try
		{
			if (id is not null)
			{
				var remoteClient = ClientFactory.CreateClient("RemoteAPI");
				@(Model.DomainVar)HistoryList = await remoteClient.GetFromJsonAsync<@(Model.DomainObj)History[]>($"api/@(Model.DomainVar)/{id}/history");
				
				Console.WriteLine($"Loaded {@(Model.DomainVar)HistoryList?.Length ?? 0} history records for @(Model.DomainVar) {id}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading history data: {ex.Message}");
			@(Model.DomainVar)HistoryList = new @(Model.DomainObj)History[0];
		}
	}

	private async Task LoadChildData()
	{
		try
		{
			if (id is not null)
			{
				var remoteClient = ClientFactory.CreateClient("RemoteAPI");
@{

	
	if (children.Count > 0)
	{
		foreach(var child in children)
		{
			var childObject = child.Object;
			var childRole = child.Role;
			var childDomainObj = childObject.DomainObj;
			var childDomainVar = childObject.DomainVar;
			
			<text>
				@(childDomainVar)List = await remoteClient.GetFromJsonAsync<@(childDomainObj)[]>($"api/@(Model.DomainVar)/{id}/@(childDomainVar)_@(childRole)");
				Console.WriteLine($"Loaded {@(childDomainVar)List?.Length ?? 0} @(childDomainVar)_@(childRole) records for @(Model.DomainVar) {id}");
			</text>
		}
	}
}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading child data: {ex.Message}");
@{
	
	if (children.Count > 0)
	{
		foreach(var child in children)
		{
			var childObject = child.Object;
			var childDomainObj = childObject.DomainObj;
			var childDomainVar = childObject.DomainVar;
			
			<text>
			@(childDomainVar)List = new @(childDomainObj)[0];
			</text>
		}
	}
}
		}
	}

	// Tab management method
	private void OnTabChanged(int tabIndex)
	{
		activeTabIndex = tabIndex;
		StateHasChanged();
	}

	async Task HandleSubmit(EditContext context)
	{
		if (context.Validate())
		{
			try
			{
				var remoteClient = ClientFactory.CreateClient("RemoteAPI");
				if (id is null)
				{
					// Create new record
					var response = await remoteClient.PostAsJsonAsync($"api/@(Model.DomainVar)", @(Model.DomainVar));
					if (response.IsSuccessStatusCode)
					{
						var createdObj = await response.Content.ReadFromJsonAsync<@(Model.DomainObj)>();
						if (createdObj != null)
						{
							@(Model.DomainVar) = createdObj;
						}
					}
				}
				else
				{
					// Update existing record
					await remoteClient.PutAsJsonAsync($"api/@(Model.DomainVar)/{id}", @(Model.DomainVar));
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error saving @(Model.DomainVar): {ex.Message}");
			}
		}

		// Navigate back to list after successful save
		Navigation.NavigateTo("/@(Model.DomainVar)");
	}

	void Cancel()
	{
		Navigation.NavigateTo("/@(Model.DomainVar)");
	}

	// Helper methods using ReflectionHelper
	private System.Reflection.PropertyInfo[] GetEditableProperties()
	{
		return ReflectionHelper.GetEditFormProperties<@(Model.DomainObj)>();
	}

	private string GetPropertyLabel(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyLabel(propInfo);
	}

	// Property getter methods
	private string GetStringProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsString(@(Model.DomainVar), propInfo);
	}

	private int GetIntProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsInt(@(Model.DomainVar), propInfo);
	}

	private int? GetNullableIntProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableInt(@(Model.DomainVar), propInfo);
	}

	private long GetLongProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsLong(@(Model.DomainVar), propInfo);
	}

	private long? GetNullableLongProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableLong(@(Model.DomainVar), propInfo);
	}

	private decimal GetDecimalProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsDecimal(@(Model.DomainVar), propInfo);
	}

	private decimal? GetNullableDecimalProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDecimal(@(Model.DomainVar), propInfo);
	}

	private bool GetBoolProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsBool(@(Model.DomainVar), propInfo);
	}

	private bool? GetNullableBoolProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableBool(@(Model.DomainVar), propInfo);
	}

	private DateTime GetDateTimeProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsDateTime(@(Model.DomainVar), propInfo);
	}

	private DateTime? GetNullableDateTimeProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDateTime(@(Model.DomainVar), propInfo);
	}

	private DateOnly GetDateOnlyProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsDateOnly(@(Model.DomainVar), propInfo);
	}

	private DateOnly? GetNullableDateOnlyProperty(System.Reflection.PropertyInfo propInfo)
	{
		return ReflectionHelper.GetPropertyValueAsNullableDateOnly(@(Model.DomainVar), propInfo);
	}

	private long GetEnumProperty(System.Reflection.PropertyInfo propInfo)
	{
		var value = propInfo.GetValue(@(Model.DomainVar));
		return value != null ? Convert.ToInt64(value) : 0;
	}

	// Property setter methods
	private async Task SetStringProperty(System.Reflection.PropertyInfo propInfo, string value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetIntProperty(System.Reflection.PropertyInfo propInfo, int value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetNullableIntProperty(System.Reflection.PropertyInfo propInfo, int? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetLongProperty(System.Reflection.PropertyInfo propInfo, long value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetNullableLongProperty(System.Reflection.PropertyInfo propInfo, long? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetDecimalProperty(System.Reflection.PropertyInfo propInfo, decimal value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetNullableDecimalProperty(System.Reflection.PropertyInfo propInfo, decimal? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetBoolProperty(System.Reflection.PropertyInfo propInfo, bool value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetNullableBoolProperty(System.Reflection.PropertyInfo propInfo, bool? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetDateTimeProperty(System.Reflection.PropertyInfo propInfo, DateTime value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetNullableDateTimeProperty(System.Reflection.PropertyInfo propInfo, DateTime? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetDateOnlyProperty(System.Reflection.PropertyInfo propInfo, DateOnly value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetNullableDateOnlyProperty(System.Reflection.PropertyInfo propInfo, DateOnly? value)
	{
		propInfo.SetValue(@(Model.DomainVar), value);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetEnumProperty(System.Reflection.PropertyInfo propInfo, string value)
	{
		if (long.TryParse(value, out var longValue))
		{
			propInfo.SetValue(@(Model.DomainVar), longValue);
			await InvokeAsync(StateHasChanged);
		}
	}
}
