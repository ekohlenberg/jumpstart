@@page "/edit-@(Model.DomainVar)"
@@page "/edit-@(Model.DomainVar)/{id:long}"
@@inject HttpClient Http
@@inject IHttpClientFactory ClientFactory
@@rendermode @@(new InteractiveWebAssemblyRenderMode(prerender: false))

@@if(id == null)
{
	<MudText Typo="Typo.h4" Class="mb-4">Create @(Model.Label)</MudText>
}
else
{
	<MudText Typo="Typo.h4" Class="mb-4">Edit @(Model.Label) @@@(Model.DomainVar).getRwkString() </MudText>
}

<EditForm Model="@(Model.DomainVar)" onsubmit="HandleSubmit">
	@@{
		Console.WriteLine("rendering");
	}
	<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
        <MudPaper Class="pa-4" Elevation="3">
            <MudGrid>
                @foreach(var a in Model.UserAttributes)
                {
                    <MudItem xs="12" sm="6">
                        <MudTextField @@bind-Value="@(Model.DomainVar).@(a.Name)" 
                                     Label="@(a.Label)" 
                                     Variant="Variant.Outlined" 
                                     FullWidth="true" />
                    </MudItem>
                }
            </MudGrid>
            
            <MudDivider Class="my-4" />
            
            <MudText Typo="Typo.h6" Class="mb-3">System Information</MudText>
            <MudGrid>
                @foreach(var g in Model.GlobalAttributes)
                {
                    <MudItem xs="12" sm="6">
                        <MudField Label="@(g.Label)" Variant="Variant.Text">
                            @@(@(Model.DomainVar).@(g.Name).ToString())
                        </MudField>
                    </MudItem>
                }
            </MudGrid>
            
            <MudStack Row="true" Justify="Justify.FlexEnd" Class="mt-4">
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           ButtonType="ButtonType.Submit">
                    Save
                </MudButton>
            </MudStack>
        </MudPaper>
	</MudContainer>
</EditForm>

@@code {
	[Parameter]
	public long? id {get;set;}

	public @(Model.Namespace).@(Model.DomainObj) @(Model.DomainVar) {get;set;} = new @(Model.Namespace).@(Model.DomainObj)();

	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("getting data");
		if (id is not null) {
			var remoteClient = ClientFactory.CreateClient("RemoteAPI");
		var result = await remoteClient.GetFromJsonAsync<@(Model.Namespace).@(Model.DomainObj)>($"api/@(Model.DomainVar)/{id}");
		if (result is not null)
			@(Model.DomainVar) = result;
		}
	
	}

	async Task  HandleSubmit()
	{
		var remoteClient = ClientFactory.CreateClient("RemoteAPI");

		if (id is not null) {
			
			var result = await remoteClient.PutAsJsonAsync<@(Model.Namespace).@(Model.DomainObj)>($"api/@(Model.DomainVar)/{id}", @(Model.DomainVar));
				if (result is not null)
				{
					var readResult = await result.Content.ReadFromJsonAsync<@(Model.Namespace).@(Model.DomainObj)>();
					if (readResult is not null) 
					{
						@(Model.DomainVar) = readResult;
					}
				}
		}
		else
		{
			var result = await remoteClient.PostAsJsonAsync<@(Model.Namespace).@(Model.DomainObj)>($"api/@(Model.DomainVar)", @(Model.DomainVar));	
			if (result is not null)
				{
					var readResult = await result.Content.ReadFromJsonAsync<@(Model.Namespace).@(Model.DomainObj)>();
					if (readResult is not null)
					{
						@(Model.DomainVar) = readResult;
					}
				}
		}

	}
}   
