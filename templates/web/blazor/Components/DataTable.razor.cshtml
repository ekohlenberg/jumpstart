@using Microsoft.AspNetCore.Components
@using System.Reflection

@@namespace @(Model.Namespace).Components

<div class="table-responsive">
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                @@foreach (var property in GetDisplayProperties())
                {
                    <th>@@GetPropertyLabel(property)</th>
                }
                @@if (ShowActions)
                {
                    <th>Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @@{
                var displayProps = GetDisplayProperties();
                Console.WriteLine($"DataTable: Rendering tbody - Data: {Data?.Count() ?? 0}, DisplayProps: {displayProps.Length}");
            }
            @@if (Data != null && Data.Any())
            {
                @@foreach (var item in Data)
                {
                    <tr>
                        @@foreach (var property in GetDisplayProperties())
                        {
                            <td>@@GetPropertyValueSafely(item, property)</td>
                        }
                        @@if (ShowActions)
                        {
                            <td>
                                @@if (OnEdit.HasDelegate)
                                {
                                    <button class="btn btn-primary btn-sm" @@onclick="@@(() => OnEdit.InvokeAsync(item))">Edit</button>
                                }
                                @@if (OnDelete.HasDelegate)
                                {
                                    <button class="btn btn-danger btn-sm ms-1" @@onclick="@@(() => OnDelete.InvokeAsync(item))">Delete</button>
                                }
                            </td>
                        }
                    </tr>
                }
            }
            else if (Data == null)
            {
                <tr>
                    <td colspan="@@(GetDisplayProperties().Length + (ShowActions ? 1 : 0))" class="text-center text-muted">
                        Loading...
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td colspan="@@(GetDisplayProperties().Length + (ShowActions ? 1 : 0))" class="text-center text-muted">
                        No data available
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@@if (ShowAddButton && OnAdd.HasDelegate)
{
    <div class="mt-3">
        <button class="btn btn-primary" @@onclick="@@(() => OnAdd.InvokeAsync())">Add</button>
    </div>
}

<style>
    .table-responsive {
        margin-bottom: 1rem;
    }
    
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
</style>

@@code {
    [Parameter] public IEnumerable<object>? Data { get; set; }
    [Parameter] public Type? DataType { get; set; }
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowAddButton { get; set; } = true;
    [Parameter] public EventCallback<object> OnEdit { get; set; }
    [Parameter] public EventCallback<object> OnDelete { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }

    private System.Reflection.PropertyInfo[] GetDisplayProperties()
    {
        Console.WriteLine($"DataTable: GetDisplayProperties called - DataType: {DataType?.Name}, Data count: {Data?.Count() ?? 0}");
        
        if (DataType == null && Data != null && Data.Any())
        {
            DataType = Data.First().GetType();
            Console.WriteLine($"DataTable: Auto-detected DataType as {DataType.Name}");
        }
        
        if (DataType != null)
        {
            var allProperties = DataType.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
            Console.WriteLine($"DataTable: Type {DataType.Name} has {allProperties.Length} total properties");
            
            var properties = ReflectionHelper.GetDisplayProperties(DataType);
            Console.WriteLine($"DataTable: Found {properties.Length} display properties for type {DataType.Name}");
            
            foreach (var prop in properties)
            {
                Console.WriteLine($"DataTable: Display property: {prop.Name} ({prop.PropertyType.Name})");
            }
            
            return properties;
        }
        
        Console.WriteLine("DataTable: No DataType available, returning empty properties");
        return new System.Reflection.PropertyInfo[0];
    }

    private string GetPropertyLabel(System.Reflection.PropertyInfo property)
    {
        return ReflectionHelper.GetPropertyLabel(property);
    }

    private object GetPropertyValue(object obj, System.Reflection.PropertyInfo property)
    {
        return ReflectionHelper.GetPropertyValue(obj, property);
    }

    private string GetPropertyValueSafely(object obj, System.Reflection.PropertyInfo property)
    {
        try
        {
            var value = property.GetValue(obj);
            return value?.ToString() ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DataTable: Error getting property {property.Name}: {ex.Message}");
            return $"[Error: {ex.Message}]";
        }
    }
}
