using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using @Model.Namespace;

namespace @Model.Namespace
{
    public partial class @(Model.DomainObj)Test : BaseTest
    {
        public static void testInsert()
        {
            var @(Model.DomainVar) = new @(Model.DomainObj)();

            @foreach (var attr in Model.Attributes)
            {
                if (attr.IsGlobal()) continue;
                
                if (attr.Name.EndsWith("id"))
                {
                    if (!string.IsNullOrEmpty(attr.FkObject))
                    {
                    <text>
                    @(Model.DomainVar).@attr.Name = BaseTest.getLastId("@attr.FkObject");
                    </text>
                    }
                }
                else
                {
                    var testDataSet = "random";
                    if (!string.IsNullOrEmpty(attr.TestDataSet))
                    {
                        testDataSet = attr.TestDataSet;
                    }
                    <text>
                    @(Model.DomainVar).@attr.Name = Convert.@(attr.ConvertMethod)(BaseTest.getTestData(@(Model.DomainVar), "@attr.SqlDataType", TestDataType.@testDataSet));
                    </text>
                }
            }
            @{
            <text>
                Console.WriteLine("Testing @(Model.DomainObj)Logic insert: " + @(Model.DomainVar).ToString());
                @(Model.DomainObj)Logic.Create().insert(@(Model.DomainVar));
                BaseTest.addLastId("@(Model.TableName)", @(Model.DomainVar).id);
            </text>
            }
        }

        public static void testUpdate()
        {
            long lastId = BaseTest.getLastId("@(Model.DomainVar)");
            var @(Model.DomainVar) = @(Model.DomainObj)Logic.Create().get(lastId);

            @foreach (var attr in Model.Attributes)
            {
                if (attr.IsGlobal()) continue;

                if (attr.Name.EndsWith("id"))
                {
                    if (!string.IsNullOrEmpty(attr.FkObject))
                    {
                        <text>
                            @(Model.DomainVar).@attr.Name = BaseTest.getLastId("@attr.FkObject");
                        </text>
                    }
                }
                else
                {
                    var testDataSet = "random";
                    if (!string.IsNullOrEmpty(attr.TestDataSet))
                    {
                        testDataSet = attr.TestDataSet;
                    }
                    <text>
                        @(Model.DomainVar).@attr.Name = (@attr.DotNetType) BaseTest.getTestData(@(Model.DomainVar), "@attr.SqlDataType", TestDataType.@testDataSet);
                    </text>
                }
            }
            @{
            <text>
                Console.WriteLine("Testing @(Model.DomainObj)Logic update: " + @(Model.DomainVar).ToString());
                @(Model.DomainObj)Logic.Create().update(lastId, @(Model.DomainVar));
            </text>
            }
        }
    }
}
