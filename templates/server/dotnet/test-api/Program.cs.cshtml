using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace @Model.Namespace
{
    class Program
    {
        static async Task Main(string[] args)
        {
            try
            {

                // Get admin role
                var opRoles = await BaseTest.GetListAsync<OpRole>("OpRole");
                var adminRole = opRoles.Find(role => role.name == "Administrator");
                BaseTest.addLastId("op_role", adminRole.id);

                // Get current principal
                var principals = await BaseTest.GetListAsync<Principal>("Principal");
                var currentPrincipal = principals.Find(principal => principal.username == Environment.UserName);

                if (currentPrincipal == null)
                {
                    await PrincipalTest.testInsert();
                    long principalId = BaseTest.getLastId("Principal");
                    await OpRoleMemberTest.testInsert();
                }
                else
                {
                    BaseTest.addLastId("principal", currentPrincipal.id);

                    var opRoleMembers = await BaseTest.GetListAsync<OpRoleMember>("OpRoleMember");
                    var adminRoleMembership = opRoleMembers.Find(membership => membership.principal_id == currentPrincipal.id && membership.op_role_id == adminRole.id);

                    if (adminRoleMembership == null)
                    {
                        await OpRoleMemberTest.testInsert();
                    }
                }

                @foreach (var metaObject in Model.Objects)
                {
                    if (metaObject.SchemaName == "sec") continue;
                    if (metaObject.SchemaName == "core") continue;
                    if (metaObject.DomainObj == "Principal") continue;
                    
                    var domainObj = metaObject.DomainObj;
                <text>
                Logger.Info("Testing @(domainObj)");
                await @(domainObj)Test.testInsert();            
                await @(domainObj)Test.testUpdate();    
                 await @(domainObj)Test.testInsert();            
                await @(domainObj)Test.testUpdate();     
                await @(domainObj)Test.testSelect();            
                </text>
                    
                }
            }
            catch( Exception x)
            {
                Logger.Error("Error executing test: ", x);
                Console.WriteLine(x.Message);
                Console.WriteLine(x.StackTrace);

                if (x.InnerException != null)
                {
                    x = x.InnerException;
                    Console.WriteLine(x.Message);
                    Console.WriteLine(x.StackTrace);
                }	
            }
		}
    }
}
