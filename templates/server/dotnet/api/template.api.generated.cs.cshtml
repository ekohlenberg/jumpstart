@{
    string namespaceName = @Model.Namespace; 
    string domainObj = @Model.DomainObj; 
    string domainVar = @Model.DomainVar; 
    string domainObjView = domainObj+"View"; 
}

using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using @(namespaceName);

namespace @(namespaceName).Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public partial class @(domainObj)Controller : ControllerBase
    {
        // GET: api/<@(domainObj)Controller>
        [HttpGet]
        public IEnumerable<@(domainObjView)> Get()
        {
            //Console.WriteLine("Processing GET List");

            List<@(domainObjView)> @(domainVar)s = @(domainObj)Logic.Create().select<@(domainObjView)>();

            return @(domainVar)s;
        }

        // GET api/<@(domainObj)Controller>/5
        [HttpGet("{id}")]
        public @(domainObj) Get(long id)
        {
            //Console.WriteLine($"Processing @(domainObj) GET ID={id}");

            @(domainObj) @(domainVar) = @(domainObj)Logic.Create().get(id);

            return @(domainVar);
        }

        // POST api/<@(domainObj)Controller>
        [HttpPost]
        public @(domainObj) Post([FromBody] @(domainObj) @(domainVar))
        {
            //Console.WriteLine($"Processing @(domainObj) POST: {@(domainVar)}");
            
            // Process any JsonElement values to ensure proper type conversion
            JsonHelper.ProcessJsonElements(@(domainVar));
            
            @(domainObj)Logic.Create().insert(@(domainVar)); 

            return @(domainVar);
        }

        // PUT api/<@(domainObj)Controller>/5
        [HttpPut("{id}")]
        public @(domainObj) Put(long id, [FromBody] @(domainObj) @(domainVar))
        {
            //Console.WriteLine($"Processing @(domainObj) PUT: ID = {id}\n{@(domainVar)}");
            
            // Process any JsonElement values to ensure proper type conversion
            JsonHelper.ProcessJsonElements(@(domainVar));
            
            @(domainObj)Logic.Create().update(id, @(domainVar));

            return @(domainVar);
        }

        // DELETE api/<@(domainObj)Controller>/5
        [HttpDelete("{id}")]
        public void Delete(long id)
        {
            @(domainObj)Logic.Create().delete(id);
        }
    }
}
