@{
    string namespaceName = @Model.Namespace; 
    string domainObj = @Model.DomainObj;      
    string domainVar = @Model.DomainVar;    
    string schemaName = @Model.SchemaName;  
    string tableName = @Model.TableName;    
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Reflection;
using @namespaceName;

namespace @namespaceName
{


    public partial class @(domainObj)Logic : I@(domainObj)Logic
    {


        public static I@(domainObj)Logic Create()
        {
            var @(domainVar) = new @(domainObj)Logic();

            var proxy = DispatchProxy.Create<I@(domainObj)Logic, Proxy<I@(domainObj)Logic>>();
            ((Proxy<I@(domainObj)Logic>)proxy).Initialize();
            ((Proxy<I@(domainObj)Logic>)proxy).Target = @(domainVar);
            ((Proxy<I@(domainObj)Logic>)proxy).DomainObj = "@(domainObj)";

            return proxy;
        }

        public  List<@(domainObj)> select()
        {
            return select<@(domainObj)>();
        }

       
    
        public  List<TBaseObject> select<TBaseObject>() where TBaseObject : BaseObject, new()
        {
            Console.WriteLine("Processing @(domainObj)Logic select<TBaseObject> List");

            List<TBaseObject> @(domainVar)s = select<TBaseObject>("@(schemaName).@(tableName)-select");

            
            return @(domainVar)s;
        }

        public List<TBaseObject> select<TBaseObject>(string queryName) where TBaseObject : BaseObject, new()
        {
            Console.WriteLine($"Processing @(domainObj)Logic select<TBaseObject> with query: {queryName}");

            List<TBaseObject> @(domainVar)s = DBPersist.ExecuteQueryByName<TBaseObject>(queryName);

            return @(domainVar)s;
        }

         public  List<@(domainObj)History> history(long id)
        {
            List<@(domainObj)History> @(domainVar)History = DBPersist.ExecuteQueryByName<@(domainObj)History>("@(schemaName).@(tableName)-get-history", new BaseObject() { { "id", id } });

            return @(domainVar)History;
        }

        public List<TBaseObject> children<TBaseObject>(long id, string childSuffix) where TBaseObject : BaseObject, new()
        {
            Console.WriteLine($"Processing @(domainObj)Logic children<TBaseObject> for ID={id}, childSuffix={childSuffix}");

            string queryName = "@(schemaName).@(tableName)-children-" + childSuffix;
            List<TBaseObject> children = DBPersist.ExecuteQueryByName<TBaseObject>(queryName, new BaseObject() { { "id", id } });

            return children;
        }

        public  @(domainObj) get(long id)
        {
            Console.WriteLine($"Processing @(domainObj)Logic get ID={id}");

            @(domainObj) @(domainVar) = DBPersist.select<@(domainObj)>($"SELECT * FROM @(schemaName).@(tableName) WHERE id = {id}").FirstOrDefault();
            

            return @(domainVar);
        }

        public  void insert(@(domainObj) @(domainVar))
        {
            Console.WriteLine($"Processing @(domainObj)Logic insert: {@(domainVar)}");

            @(domainVar).is_active = 1;

            DBPersist.insert(@(domainVar));
        }

        public  void put(@(domainObj) @(domainVar))
        {
            Console.WriteLine($"Processing @(domainObj)Logic put: {@(domainVar)}");

            @(domainVar).is_active = 1;

            DBPersist.put(@(domainVar));
        }

        public  void update(long id, @(domainObj) @(domainVar))
        {
            Console.WriteLine($"Processing @(domainObj)Logic update: ID = {id}\n{@(domainVar)}");

            @(domainVar).id = id;
            DBPersist.update(@(domainVar));
        }

        public  void delete(long id)
        {
            @(domainObj) @(domainVar) = get(id);
            @(domainVar).is_active = 0;
            DBPersist.update(@(domainVar));
        }
    }
}
