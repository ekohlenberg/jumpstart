using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace @Model.Namespace
{
    /// <summary>
    /// REST client for communicating with the Scheduler service
    /// </summary>
    public class SchedulerClient : IDisposable
    {
        private readonly HttpClient _httpClient;
        private readonly string _baseUrl;

        public SchedulerClient(string baseUrl)
        {
            _baseUrl = baseUrl ?? throw new ArgumentNullException(nameof(baseUrl));
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(_baseUrl),
                Timeout = TimeSpan.FromSeconds(30)
            };
        }

        /// <summary>
        /// Schedule a new job
        /// </summary>
        public async Task<long> ScheduleAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/schedule", workflowId);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Execute a job immediately
        /// </summary>
        public async Task<long> ExecuteAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/execute", workflowId);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Cancel a scheduled job
        /// </summary>
        public async Task CancelAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/cancel/{workflowId}", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Pause a running job
        /// </summary>
        public async Task PauseAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/pause/{workflowId}", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Resume a paused job
        /// </summary>
        public async Task ResumeAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/resume/{workflowId}", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Retry a failed job
        /// </summary>
        public async Task RetryAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/retry/{workflowId}", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Abort a running job
        /// </summary>
        public async Task AbortAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/abort/{workflowId}", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Get status of a workflow
        /// </summary>
        public async Task<object?> GetStatusAsync(long workflowId)
        {
            var response = await _httpClient.GetAsync($"/api/scheduler/status/{workflowId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<object>();
        }

        /// <summary>
        /// List workflows with optional filters
        /// </summary>
        public async Task<List<long>?> ListAsync(string? status = null, string? priority = null)
        {
            var query = new List<string>();
            if (!string.IsNullOrEmpty(status)) query.Add($"status={status}");
            if (!string.IsNullOrEmpty(priority)) query.Add($"priority={priority}");
            
            var queryString = query.Count > 0 ? "?" + string.Join("&", query) : "";
            var response = await _httpClient.GetAsync($"/api/scheduler/list{queryString}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<long>>();
        }

        /// <summary>
        /// Monitor a workflow
        /// </summary>
        public async Task<object?> MonitorAsync(long workflowId)
        {
            var response = await _httpClient.GetAsync($"/api/scheduler/monitor/{workflowId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<object>();
        }

        /// <summary>
        /// Query workflows by date range
        /// </summary>
        public async Task<List<long>?> QueryAsync(DateTime? startDate = null, DateTime? endDate = null)
        {
            var query = new List<string>();
            if (startDate.HasValue) query.Add($"startDate={startDate.Value:yyyy-MM-dd}");
            if (endDate.HasValue) query.Add($"endDate={endDate.Value:yyyy-MM-dd}");
            
            var queryString = query.Count > 0 ? "?" + string.Join("&", query) : "";
            var response = await _httpClient.GetAsync($"/api/scheduler/query{queryString}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<long>>();
        }

        /// <summary>
        /// Register a worker node
        /// </summary>
        public async Task RegisterAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/register", workflowId);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Unregister a worker node
        /// </summary>
        public async Task UnregisterAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/unregister/{workflowId}", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Get health status
        /// </summary>
        public async Task<object?> GetHealthAsync()
        {
            var response = await _httpClient.GetAsync("/api/scheduler/health");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<object>();
        }

        /// <summary>
        /// Queue a workflow
        /// </summary>
        public async Task<long> QueueAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/queue", workflowId);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Get a workflow by ID
        /// </summary>
        public async Task<object?> GetWorkflowAsync(long workflowId)
        {
            var response = await _httpClient.GetAsync($"/api/scheduler/workflow/{workflowId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<object>();
        }

        /// <summary>
        /// Get all workflows
        /// </summary>
        public async Task<List<long>?> GetAllWorkflowsAsync()
        {
            var response = await _httpClient.GetAsync("/api/scheduler/workflows");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<long>>();
        }

        /// <summary>
        /// Create a new workflow
        /// </summary>
        public async Task<long> CreateWorkflowAsync(object workflowDefinition)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/workflow", workflowDefinition);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Update a workflow
        /// </summary>
        public async Task UpdateWorkflowAsync(long workflowId, object workflowDefinition)
        {
            var response = await _httpClient.PutAsJsonAsync($"/api/scheduler/workflow/{workflowId}", workflowDefinition);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Delete a workflow
        /// </summary>
        public async Task DeleteWorkflowAsync(long workflowId)
        {
            var response = await _httpClient.DeleteAsync($"/api/scheduler/workflow/{workflowId}");
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Allocate resources for a workflow
        /// </summary>
        public async Task<long> AllocateAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/allocate", workflowId);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Deallocate resources for a workflow
        /// </summary>
        public async Task DeallocateAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/deallocate/{workflowId}", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Balance load across agents
        /// </summary>
        public async Task BalanceAsync()
        {
            var response = await _httpClient.PostAsync("/api/scheduler/balance", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Scale resources
        /// </summary>
        public async Task ScaleAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/scale", workflowId);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Wait for dependencies
        /// </summary>
        public async Task<long> WaitAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/wait", workflowId);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Trigger dependent workflows
        /// </summary>
        public async Task TriggerAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/trigger/{workflowId}", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Chain multiple workflows
        /// </summary>
        public async Task<List<long>?> ChainAsync(List<long> workflowIds)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/chain", workflowIds);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<long>>();
        }

        /// <summary>
        /// Fork workflow into sub-workflows
        /// </summary>
        public async Task<List<long>?> ForkAsync(long workflowId, List<long> subWorkflowIds)
        {
            var response = await _httpClient.PostAsJsonAsync($"/api/scheduler/fork/{workflowId}", subWorkflowIds);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<long>>();
        }

        /// <summary>
        /// Join parallel workflows
        /// </summary>
        public async Task<long> JoinAsync(long workflowId)
        {
            var response = await _httpClient.PostAsync($"/api/scheduler/join/{workflowId}", null);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Schedule recurring workflow
        /// </summary>
        public async Task<long> RepeatAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/repeat", workflowId);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Batch multiple workflows
        /// </summary>
        public async Task<List<long>?> BatchAsync(List<long> workflowIds)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/batch", workflowIds);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<long>>();
        }

        /// <summary>
        /// Prioritize a workflow
        /// </summary>
        public async Task PrioritizeAsync(long workflowId, int priority)
        {
            var response = await _httpClient.PostAsJsonAsync($"/api/scheduler/prioritize/{workflowId}", priority);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Recover from failures
        /// </summary>
        public async Task RecoverAsync()
        {
            var response = await _httpClient.PostAsync("/api/scheduler/recover", null);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Migrate workflow to another agent
        /// </summary>
        public async Task<long> MigrateAsync(long workflowId, string targetAgent)
        {
            var response = await _httpClient.PostAsJsonAsync($"/api/scheduler/migrate/{workflowId}", targetAgent);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<long>();
        }

        /// <summary>
        /// Configure workflow
        /// </summary>
        public async Task ConfigureAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/configure", workflowId);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Update workflow configuration
        /// </summary>
        public async Task UpdateAsync(long workflowId, object updateData)
        {
            var response = await _httpClient.PutAsJsonAsync($"/api/scheduler/update/{workflowId}", updateData);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Validate workflow
        /// </summary>
        public async Task<object?> ValidateAsync(long workflowId)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/scheduler/validate", workflowId);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<object>();
        }

        public void Dispose()
        {
            _httpClient?.Dispose();
        }
    }
}

