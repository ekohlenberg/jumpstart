using System.Net;
using System.Net.Sockets;

// Configuration for dynamic port binding
const int StartPort = 5100;
const int EndPort = 5200;
const int MaxRetries = 100;

int boundPort = 0;
var builder = WebApplication.CreateBuilder(args);

// Try to find an available port
for (int port = StartPort; port <= EndPort && port < StartPort + MaxRetries; port++)
{
    try
    {
        // Configure Kestrel to listen on the specific port
        builder.WebHost.UseUrls($"http://localhost:{port}");
        
        // Test if port is available by trying to bind
        using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))
        {
            socket.Bind(new IPEndPoint(IPAddress.Loopback, port));
        }
        
        boundPort = port;
        Console.WriteLine($"Agent will bind to port: {boundPort}");
        break;
    }
    catch (SocketException)
    {
        // Port is in use, try next port
        continue;
    }
}

if (boundPort == 0)
{
    Console.WriteLine($"ERROR: Could not find available port in range {StartPort}-{EndPort}");
    Environment.Exit(1);
}

// Add services to the container.
builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddCors(options =>
{
    options.AddPolicy("Access-Control-Allow-Origin",
                    builder =>
                    {
                        builder.WithOrigins("*")
                           .AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin();
                    });

});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
app.UseCors("Access-Control-Allow-Origin");

//app.UseHttpsRedirection();

//app.UseAuthorization();

app.MapControllers();

// Register agent after successful binding
var registrationTask = Task.Run(async () =>
{
    try
    {
        // Wait a moment for the server to fully start
        await Task.Delay(1000);
        
        // Call registration callback
        await RegisterAgent(boundPort);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error during agent registration: {ex.Message}");
    }
});

app.Run();

// Registration callback function
static async Task RegisterAgent(int port)
{
    var hostname = Environment.MachineName;
    var agentId = $"{hostname}:{port}";
    
    Console.WriteLine($"==============================================");
    Console.WriteLine($"Agent Registration");
    Console.WriteLine($"==============================================");
    Console.WriteLine($"Agent ID: {agentId}");
    Console.WriteLine($"Hostname: {hostname}");
    Console.WriteLine($"Port: {port}");
    Console.WriteLine($"URL: http://localhost:{port}");
    Console.WriteLine($"==============================================");
    
    // TODO: Implement actual registration logic
    // Examples:
    // - Call scheduler API to register this agent
    // - Store agent information in database
    // - Update service discovery registry
    // - Send heartbeat to scheduler
    
    // Example registration call (uncomment and customize):
    /*
    try
    {
        using var httpClient = new HttpClient();
        var registrationData = new
        {
            agentId = agentId,
            hostname = hostname,
            port = port,
            status = "online",
            capabilities = new[] { "worker" },
            registeredAt = DateTime.UtcNow
        };
        
        var schedulerUrl = "http://localhost:5000/api/scheduler/register";
        var response = await httpClient.PostAsJsonAsync(schedulerUrl, registrationData);
        
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Agent successfully registered with scheduler");
        }
        else
        {
            Console.WriteLine($"Failed to register agent: {response.StatusCode}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Registration error: {ex.Message}");
    }
    */
    
    await Task.CompletedTask;
}
