@{
    string namespaceName = @Model.Namespace; 
}

using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace @(namespaceName).Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AgentController : ControllerBase
    {
        // =====================================
        // Process Management Operations
        // =====================================

        // POST api/agent/start
        [HttpPost("start")]
        public ActionResult<long> Start([FromBody] long executionId)
        {
            //Console.WriteLine($"Processing Agent START: {executionId}");
            
            AgentLogic.Create().start(executionId);
            return Ok(executionId);
        }

        // POST api/agent/stop/{executionId}
        [HttpPost("stop/{executionId}")]
        public ActionResult Stop(long executionId)
        {
            //Console.WriteLine($"Processing Agent STOP: ID={executionId}");
            
            AgentLogic.Create().stop(executionId);
            return Ok();
        }

        // POST api/agent/kill/{executionId}
        [HttpPost("kill/{executionId}")]
        public ActionResult Kill(long executionId)
        {
            //Console.WriteLine($"Processing Agent KILL: ID={executionId}");
            
            AgentLogic.Create().kill(executionId);
            return Ok();
        }

        // POST api/agent/restart/{executionId}
        [HttpPost("restart/{executionId}")]
        public ActionResult Restart(long executionId)
        {
            //Console.WriteLine($"Processing Agent RESTART: ID={executionId}");
            
            AgentLogic.Create().restart(executionId);
            return Ok();
        }

        // POST api/agent/pause/{executionId}
        [HttpPost("pause/{executionId}")]
        public ActionResult Pause(long executionId)
        {
            //Console.WriteLine($"Processing Agent PAUSE: ID={executionId}");
            
            AgentLogic.Create().pause(executionId);
            return Ok();
        }

        // POST api/agent/resume/{executionId}
        [HttpPost("resume/{executionId}")]
        public ActionResult Resume(long executionId)
        {
            //Console.WriteLine($"Processing Agent RESUME: ID={executionId}");
            
            AgentLogic.Create().resume(executionId);
            return Ok();
        }

        // =====================================
        // Status & Reporting Operations
        // =====================================

        // GET api/agent/status/{executionId}
        [HttpGet("status/{executionId}")]
        public ActionResult<object> Status(long executionId)
        {
            //Console.WriteLine($"Processing Agent STATUS: ID={executionId}");
            
            var status = AgentLogic.Create().status(executionId);
            return Ok(status);
        }

        // POST api/agent/heartbeat
        [HttpPost("heartbeat")]
        public ActionResult Heartbeat([FromBody] object heartbeatData)
        {
            //Console.WriteLine($"Processing Agent HEARTBEAT");
            
            AgentLogic.Create().heartbeat(heartbeatData);
            return Ok();
        }

        // POST api/agent/report
        [HttpPost("report")]
        public ActionResult Report([FromBody] object reportData)
        {
            //Console.WriteLine($"Processing Agent REPORT");
            
            AgentLogic.Create().report(reportData);
            return Ok();
        }

        // POST api/agent/log
        [HttpPost("log")]
        public ActionResult Log([FromBody] object logData)
        {
            //Console.WriteLine($"Processing Agent LOG");
            
            AgentLogic.Create().log(logData);
            return Ok();
        }

        // POST api/agent/metrics
        [HttpPost("metrics")]
        public ActionResult Metrics([FromBody] object metricsData)
        {
            //Console.WriteLine($"Processing Agent METRICS");
            
            AgentLogic.Create().metrics(metricsData);
            return Ok();
        }

        // =====================================
        // Resource Management Operations
        // =====================================

        // POST api/agent/register
        [HttpPost("register")]
        public ActionResult<long> Register([FromBody] object registrationData)
        {
            //Console.WriteLine($"Processing Agent REGISTER");
            
            long agentId = AgentLogic.Create().register(registrationData);
            return CreatedAtAction(nameof(GetAgent), new { agentId = agentId }, agentId);
        }

        // POST api/agent/unregister/{agentId}
        [HttpPost("unregister/{agentId}")]
        public ActionResult Unregister(long agentId)
        {
            //Console.WriteLine($"Processing Agent UNREGISTER: ID={agentId}");
            
            AgentLogic.Create().unregister(agentId);
            return Ok();
        }

        // GET api/agent/capabilities
        [HttpGet("capabilities")]
        public ActionResult<object> Capabilities()
        {
            //Console.WriteLine($"Processing Agent CAPABILITIES");
            
            var capabilities = AgentLogic.Create().capabilities();
            return Ok(capabilities);
        }

        // POST api/agent/allocate
        [HttpPost("allocate")]
        public ActionResult<long> Allocate([FromBody] long executionId)
        {
            //Console.WriteLine($"Processing Agent ALLOCATE: {executionId}");
            
            AgentLogic.Create().allocate(executionId);
            return Ok(executionId);
        }

        // POST api/agent/release/{executionId}
        [HttpPost("release/{executionId}")]
        public ActionResult Release(long executionId)
        {
            //Console.WriteLine($"Processing Agent RELEASE: ID={executionId}");
            
            AgentLogic.Create().release(executionId);
            return Ok();
        }

        // =====================================
        // Job Execution Operations
        // =====================================

        // POST api/agent/execute
        [HttpPost("execute")]
        public ActionResult<long> Execute([FromBody] long executionId)
        {
            //Console.WriteLine($"Processing Agent EXECUTE: {executionId}");
            
            AgentLogic.Create().execute(executionId);
            return Ok(executionId);
        }

        // POST api/agent/validate
        [HttpPost("validate")]
        public ActionResult Validate([FromBody] long executionId)
        {
            //Console.WriteLine($"Processing Agent VALIDATE: {executionId}");
            
            var validationResult = AgentLogic.Create().validate(executionId);
            return Ok(validationResult);
        }

        // POST api/agent/prepare
        [HttpPost("prepare")]
        public ActionResult<long> Prepare([FromBody] long executionId)
        {
            //Console.WriteLine($"Processing Agent PREPARE: {executionId}");
            
            AgentLogic.Create().prepare(executionId);
            return Ok(executionId);
        }

        // POST api/agent/cleanup/{executionId}
        [HttpPost("cleanup/{executionId}")]
        public ActionResult Cleanup(long executionId)
        {
            //Console.WriteLine($"Processing Agent CLEANUP: ID={executionId}");
            
            AgentLogic.Create().cleanup(executionId);
            return Ok();
        }

        // POST api/agent/retry/{executionId}
        [HttpPost("retry/{executionId}")]
        public ActionResult Retry(long executionId)
        {
            //Console.WriteLine($"Processing Agent RETRY: ID={executionId}");
            
            AgentLogic.Create().retry(executionId);
            return Ok();
        }

        // =====================================
        // Communication Operations
        // =====================================

        // GET api/agent/ping
        [HttpGet("ping")]
        public ActionResult Ping()
        {
            //Console.WriteLine($"Processing Agent PING");
            
            var pingResponse = AgentLogic.Create().ping();
            return Ok(pingResponse);
        }

        // POST api/agent/acknowledge
        [HttpPost("acknowledge")]
        public ActionResult Acknowledge([FromBody] long executionId)
        {
            //Console.WriteLine($"Processing Agent ACKNOWLEDGE: {executionId}");
            
            AgentLogic.Create().acknowledge(executionId);
            return Ok();
        }

        // POST api/agent/notify
        [HttpPost("notify")]
        public ActionResult Notify([FromBody] object notificationData)
        {
            //Console.WriteLine($"Processing Agent NOTIFY");
            
            AgentLogic.Create().notify(notificationData);
            return Ok();
        }

        // POST api/agent/request
        [HttpPost("request")]
        public new ActionResult<object> Request([FromBody] object requestData)
        {
            //Console.WriteLine($"Processing Agent REQUEST");
            
            var response = AgentLogic.Create().request(requestData);
            return Ok(response);
        }

        // =====================================
        // System Operations
        // =====================================

        // POST api/agent/shutdown
        [HttpPost("shutdown")]
        public ActionResult Shutdown()
        {
            //Console.WriteLine($"Processing Agent SHUTDOWN");
            
            AgentLogic.Create().shutdown();
            return Ok();
        }

        // POST api/agent/reload
        [HttpPost("reload")]
        public ActionResult Reload()
        {
            //Console.WriteLine($"Processing Agent RELOAD");
            
            AgentLogic.Create().reload();
            return Ok();
        }

        // POST api/agent/update
        [HttpPost("update")]
        public ActionResult Update([FromBody] object updateData)
        {
            //Console.WriteLine($"Processing Agent UPDATE");
            
            AgentLogic.Create().update(updateData);
            return Ok();
        }

        // GET api/agent/diagnose
        [HttpGet("diagnose")]
        public ActionResult Diagnose()
        {
            //Console.WriteLine($"Processing Agent DIAGNOSE");
            
            var diagnostics = AgentLogic.Create().diagnose();
            return Ok(diagnostics);
        }

        // GET api/agent/health
        [HttpGet("health")]
        public ActionResult Health()
        {
            //Console.WriteLine($"Processing Agent HEALTH");
            
            var healthStatus = AgentLogic.Create().health();
            return Ok(healthStatus);
        }

        // =====================================
        // Security Operations
        // =====================================

        // POST api/agent/authenticate
        [HttpPost("authenticate")]
        public ActionResult Authenticate([FromBody] object credentials)
        {
            //Console.WriteLine($"Processing Agent AUTHENTICATE");
            
            var authResult = AgentLogic.Create().authenticate(credentials);
            return Ok(authResult);
        }

        // POST api/agent/authorize
        [HttpPost("authorize")]
        public ActionResult Authorize([FromBody] object authorizationData)
        {
            //Console.WriteLine($"Processing Agent AUTHORIZE");
            
            var authResult = AgentLogic.Create().authorize(authorizationData);
            return Ok(authResult);
        }

        // =====================================
        // Standard Operations
        // =====================================

        // GET: api/agent/executions
        [HttpGet("executions")]
        public ActionResult<IEnumerable<long>> GetExecutions()
        {
            //Console.WriteLine("Processing GET Execution List");
            List<long> executionIds = AgentLogic.Create().select();
            return Ok(executionIds);
        }

        // GET api/agent/execution/{executionId}
        [HttpGet("execution/{executionId}")]
        public ActionResult<object> GetExecution(long executionId)
        {
            //Console.WriteLine($"Processing Agent GET Execution ID={executionId}");
            var execution = AgentLogic.Create().get(executionId);
            return Ok(execution);
        }

        // GET api/agent/info
        [HttpGet("info")]
        public ActionResult<object> GetAgent()
        {
            //Console.WriteLine($"Processing Agent GET Info");
            var agentInfo = AgentLogic.Create().getAgentInfo();
            return Ok(agentInfo);
        }

        // POST api/agent/execution
        [HttpPost("execution")]
        public ActionResult<long> CreateExecution([FromBody] object executionDefinition)
        {
            //Console.WriteLine($"Processing Agent POST: Create Execution");
            long executionId = AgentLogic.Create().insert(executionDefinition);
            return CreatedAtAction(nameof(GetExecution), new { executionId = executionId }, executionId);
        }

        // PUT api/agent/execution/{executionId}
        [HttpPut("execution/{executionId}")]
        public ActionResult UpdateExecution(long executionId, [FromBody] object executionData)
        {
            //Console.WriteLine($"Processing Agent PUT: Update Execution ID={executionId}");
            AgentLogic.Create().update(executionId, executionData);
            return Ok();
        }

        // DELETE api/agent/execution/{executionId}
        [HttpDelete("execution/{executionId}")]
        public ActionResult DeleteExecution(long executionId)
        {
            //Console.WriteLine($"Processing Agent DELETE: Execution ID={executionId}");
            AgentLogic.Create().delete(executionId);
            return Ok();
        }
    }
}
