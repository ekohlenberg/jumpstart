
using System;
using System.Collections.Generic;
using System.Text;
using System.Configuration;
using System.Data.Common;
using System.Collections.Immutable;
using System.Linq;
using System.Reflection;

namespace @Model.Name
{
    public class DBPersist
    {
        private static readonly IDatabaseProvider _provider = DatabaseProviderFactory.CreateProvider();
        private static readonly Dictionary<string, BaseObject> _queryCache = new Dictionary<string, BaseObject>();
        
        public delegate void SelectCallback(DbDataReader rdr);
        
        static public void select( SelectCallback selectCallback, string sql, string connectionName = "default")
        {
            Logger.Sql($"Executing sql {sql} on connection '{connectionName}'.");
            
            try
            {
                string connectionStr = Config.getDbConnection(connectionName);

                using (DbConnection connection = _provider.CreateConnection(connectionStr))
                {

                    using (DbCommand command = _provider.CreateCommand(sql, connection))
                    {
                        using (DbDataReader rdr = command.ExecuteReader())
                        {
                            while (rdr.Read())
                            {
                                LogRowData(rdr);
                                selectCallback(rdr);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string m = $"Error executing select: {sql} on connection '{connectionName}'";

                Logger.Error( m, ex);
                throw new Exception(m, ex);
            }
        }

        static public void select( SelectCallback selectCallback, string sqlTemplate, BaseObject filter, string connectionName = "default")
        {
            string sql = substituteTemplate(filter, sqlTemplate);
            select(selectCallback, sql, connectionName);
        }

        /// <summary>
        /// Executes a SQL query and returns a List<T> where T derives from BaseObject
        /// </summary>
        /// <typeparam name="T">Type that derives from BaseObject</typeparam>
        /// <param name="sql">The SQL query to execute</param>
        /// <param name="connectionName">The name of the connection to use</param>
        /// <returns>List of T objects</returns>
        public static List<T> select<T>(string sql, string connectionName = "default") where T : BaseObject, new()
        {
            Logger.Sql($"Executing generic select sql: {sql} on connection '{connectionName}'");

            List<T> baseObjects = new List<T>();

            void baseObjectCallback(System.Data.Common.DbDataReader rdr)
            {
                T baseObject = new T();
                DBPersist.autoAssign(rdr, baseObject);
                baseObjects.Add(baseObject);
            };

            select(baseObjectCallback, sql, connectionName);
            return baseObjects;
        }

        static public long insert( BaseObject baseObject, string connectionName = "default" )
        {
            long id = identity(baseObject, connectionName);
            int ver = version(baseObject, connectionName);

            baseObject["id"] = id;
            baseObject["version"] = ver;
            baseObject["created_by"] = Environment.UserName;
            baseObject["last_updated"] = DateTime.Now;
            baseObject["last_updated_by"] = Environment.UserName;

            var (sql, parameters) = insertSql(baseObject, baseObject.tableName);
            execCmd(sql, parameters, connectionName);

            audit(baseObject, connectionName);

            return id;
        }

        static public long audit( BaseObject baseObject, string connectionName = "default" )
        {
            // Create the appropriate History object using factory pattern
            BaseObject auditBaseObject = CreateHistoryObject(baseObject);

            string auditFKCol = baseObject.tableBaseName + "_id";
            auditBaseObject[auditFKCol] = baseObject["id"];
            long id = identity(baseObject, connectionName);
            auditBaseObject["id"] = id;

            Console.WriteLine("Audit: " + auditBaseObject.ToString());

            var (sql, parameters) = insertSql(auditBaseObject, baseObject.auditTableName);
            execCmd(sql, parameters, connectionName);

            return id;
        }

        private static BaseObject CreateHistoryObject(BaseObject baseObject)
        {
            // Get the type of the base object
            Type baseObjectType = baseObject.GetType();
            
            // Construct the History class name
            string historyClassName = baseObjectType.Name + "History";
            
            // Get the History type from the same assembly
            Type historyType = baseObjectType.Assembly.GetType(baseObjectType.Namespace + "." + historyClassName);
            
            if (historyType == null)
            {
                // Fallback to original behavior if History class doesn't exist
                Logger.Warning($"History class {historyClassName} not found for {baseObjectType.Name}, using BaseObject fallback");
                return new BaseObject(baseObject);
            }
            
            try
            {
                // Create an instance of the History class
                var historyObject = Activator.CreateInstance(historyType) as BaseObject;
                
                if (historyObject == null)
                {
                    Logger.Error($"Failed to create instance of {historyClassName}");
                    return new BaseObject(baseObject);
                }
                
                // Copy all properties from the base object to the history object
                foreach (var key in baseObject.Keys)
                {
                    historyObject[key] = baseObject[key];
                }
                
                return historyObject;
            }
            catch (Exception ex)
            {
                Logger.Error($"Error creating History object for {baseObjectType.Name}: {ex.Message}");
                return new BaseObject(baseObject);
            }
        }
        
        static public void update(BaseObject baseObject, string connectionName = "default")
        {
            baseObject["version"] = version(baseObject, connectionName);
            baseObject["last_updated"] = DateTime.Now;
            baseObject["last_updated_by"] = Environment.UserName;

            string sql = updateSql(baseObject);
            execCmd(sql, connectionName);

            audit(baseObject, connectionName);
        }

        public static void execCmd( BaseObject parameters, string sqlTemplate, string connectionName = "default")
        {
            string sql = substituteTemplate(parameters, sqlTemplate);
            execCmd(sql, connectionName);
        }
        
        public static void execCmd(string sql, string connectionName = "default")
        {
            execCmd(sql, null, connectionName);
        }
        

        public static void execCmd(string sql, Dictionary<string, object> parameters = null, string connectionName = "default")
        {
            try
            {
                Logger.Sql($"Executing sql {sql} on connection '{connectionName}'.");

                string connectionStr = Config.getDbConnection(connectionName);

                using (DbConnection connection = _provider.CreateConnection(connectionStr))
                {
                    using (DbCommand command = _provider.CreateCommand(sql, connection))
                    {
                        // Add parameters if provided
                        if (parameters != null)
                        {
                            foreach (var param in parameters)
                            {
                                _provider.AddParameterWithValue(command, param.Key, param.Value);
                            }
                        }
                        
                        command.ExecuteNonQuery();
                    }
                }
            }
            catch(Exception x)
            {
                Logger.Error(x.Message + ": " + sql + " on connection '" + connectionName + "'");
            }
        }

        static (string sql, Dictionary<string, object> parameters) insertSql( BaseObject baseObject, string tableName )
        {
            StringBuilder sql = new StringBuilder("insert into " + _provider.FormatTableName(tableName) + " ");
            StringBuilder cols = new StringBuilder("");
            StringBuilder vals = new StringBuilder("");
            var parameters = new Dictionary<string, object>();

            // Use reflection to get all properties with ColumnInfoAttribute
            Type objectType = baseObject.GetType();
            PropertyInfo[] properties = objectType.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            
            foreach (PropertyInfo property in properties)
            {
                // Check if property has ColumnInfoAttribute
                var labelAttribute = property.GetCustomAttribute<ColumnInfoAttribute>();
                if (labelAttribute == null) continue;
                
                // Get the value directly from the underlying dictionary to preserve type information
                object value = null;
                if (baseObject.ContainsKey(property.Name))
                {
                    value = baseObject[property.Name];
                }
                else
                {
                    // If not in dictionary, use the property getter for default value
                    value = property.GetValue(baseObject);
                }
                
                if (cols.Length > 0)
                {
                    cols.Append(",");
                    vals.Append(",");
                }
                cols.Append(_provider.FormatColumnName(property.Name));
                
                // Use parameterized query instead of direct value formatting
                string paramName = _provider.FormatParameter(property.Name);
                vals.Append(paramName);
                parameters[paramName] = value;
            }

            sql.Append("(");
            sql.Append(cols);
            sql.Append(") values (");
            sql.Append(vals);
            sql.Append(");");

            return (sql.ToString(), parameters);
        }

        static string updateSql( BaseObject baseObject)
        {
            StringBuilder sql = new StringBuilder("update " + _provider.FormatTableName(baseObject.tableName) + " set ");
            StringBuilder expressions = new StringBuilder();
            StringBuilder where = new StringBuilder();

            exprSql(baseObject, baseObject.Keys, ", ", expressions);

            where.Append(" where id=");
            where.Append(_provider.FormatValue(baseObject["id"]));

            sql.Append(expressions);
            sql.Append(where);
            sql.Append(";");

            return sql.ToString();
        }

        private static void exprSql(BaseObject baseObject, IEnumerable<string> attrList, string sepToken, StringBuilder expressions)
        {
            foreach (string k in attrList)
            {
                if (k != "id")
                {
                    object v = baseObject[k];
                    if (v == null) continue;
                    if (v == DBNull.Value) continue;
                    if (string.IsNullOrEmpty(v.ToString())) continue;

                    if (expressions.Length > 0)
                    {
                        expressions.Append(sepToken);
                    }
                    string expr = string.Empty;
                    expr += _provider.FormatColumnName(k);
                    expr += "=";
                    expr += _provider.FormatValue(v);

                    expressions.Append(expr);
                }
            }
        }

        static public void get(BaseObject t, string connectionName = "default")
        {
            string sql = getSql(t);

            SelectCallback sc = (rdr) =>
            {
                autoAssign(rdr, t);
            };

            select(sc, sql, connectionName);
        }

        static public void put(BaseObject baseObject, string rwkCol, string connectionName = "default")
        {
            string sql = "select * from " + _provider.FormatTableName("^(tableName)") + " where " + _provider.FormatColumnName("^(rwkCol)") + " = ^(rwkValue)";
            bool found = false;

            BaseObject filter = new BaseObject();
            filter["tableName"] = baseObject.tableName;
            filter["rwkCol"] = rwkCol;
            filter["rwkValue"] = _provider.FormatValue(baseObject[rwkCol].ToString());

            SelectCallback scb = (rdr) =>
            {
                found = true;
                baseObject["id"] = rdr["id"];
            };

            select(scb, sql, filter, connectionName);

            if (found)
            {
                update(baseObject, connectionName);
            }
            else
            {
                insert(baseObject, connectionName);
            }
        }

        static public void put(BaseObject baseObject, string connectionName = "default")
        {
            string sql = "select * from " + _provider.FormatTableName("^(schemaName).^(tableName)") + " where ^(expression)";
            int count = 0;
            StringBuilder expression = new StringBuilder();
            bool hasId = false;

            if (baseObject.ContainsKey("id"))
            {
                if(Convert.ToInt64(baseObject["id"]) != default(long)) hasId = true;
            }

            if(!hasId)
            {
                if (baseObject.getRwk().Count <= 0) throw new Exception(baseObject.GetType().Name + ".rwk list is empty. DBPersist.put(BaseObject) requires at least one attribute in the rwk list.");

                exprSql(baseObject, baseObject.getRwk(), " and ", expression);

                BaseObject filter = new BaseObject();
                filter["schemaName"] = baseObject.schemaName;
                filter["tableName"] = baseObject.tableBaseName;
                filter["expression"] = expression.ToString();

                SelectCallback scb = (rdr) =>
                {
                    count++;
                    baseObject["id"] = rdr["id"];
                };

                select(scb, sql, filter, connectionName);
            }

            if (count == 1 || hasId)
            {
                update(baseObject, connectionName);
            }
            else if (count == 0)
            {
                insert(baseObject, connectionName);
            }
            else
            {
                throw new Exception(baseObject.GetType().Name + ".rwk returned more that one row. sql=" + sql); ;
            }
        }

        static long identity(BaseObject baseObject, string connectionName = "default")
        {
            long id = 0;

            string sql = _provider.GetNextIdentitySql(baseObject.tableName);

            SelectCallback scb = (rdr) =>
            {
                id = Convert.ToInt64(rdr[0]);
            };

            select(scb, sql, connectionName);

            return id;
        }

        static int version(BaseObject baseObject, string connectionName = "default")
        {
            int ver = 0;
            
            long id = 0;
            if (baseObject.ContainsKey("id"))
            {
                if (!Int64.TryParse(baseObject["id"].ToString(), out id))
                {
                    id = 0;
                }
            }
                
            string sql = _provider.GetVersionSql(baseObject.tableName, id);

            SelectCallback scb = (rdr) =>
            {
                ver = Convert.ToInt32(rdr[0]);
            };

            select(scb, sql, connectionName);

            return ver;
        }
        
        static string getSql( BaseObject t)
        {
            string sqlTemplate = "select * from ^(table) where id=^(id)";

            BaseObject p = new BaseObject();

            p["id"] = t["id"];
            p["table"] = _provider.FormatTableName(t.tableName);

            return substituteTemplate(p, sqlTemplate);
        }

        public static void autoAssign( DbDataReader rdr, BaseObject t)
        {
            for (int i = 0; i < rdr.FieldCount; i++)
            {
                string k = rdr.GetName(i);
                if (t.ContainsKey(k)) { t[k] = rdr.GetValue(i); }
                else { t.Add(k, rdr.GetValue(i)); }
            }
        }

        private static void LogRowData(DbDataReader rdr)
        {
            if ((Logger.enabledLevels & Logger.Level.Data) == 0) return;
            
            object[] values = new object[rdr.FieldCount];
            rdr.GetValues(values);
            
            var fieldData = new List<string>();
            for (int i = 0; i < rdr.FieldCount; i++)
            {
                fieldData.Add($"{rdr.GetName(i)}={values[i]}");
            }
            Logger.Data($"Row data: {string.Join(";", fieldData)}");
        }

        protected static string substituteTemplate( BaseObject parameters, string sqlTemplate)
        {
            StringBuilder sb = new StringBuilder(sqlTemplate);

            foreach( string k in parameters.Keys)
            {
                object v = string.Empty;
                parameters.TryGetValue(k, out v);

                string paramName = "^(" + k + ")";
                sb.Replace(paramName, v.ToString());
            }

            return sb.ToString();
        }

        /// <summary>
        /// Retrieves a query by name from the core.query table with caching
        /// </summary>
        /// <param name="queryName">The name of the query to retrieve</param>
        /// <param name="connectionName">The name of the connection to use</param>
        /// <returns>A BaseObject containing the query information, or null if not found</returns>
        public static BaseObject GetQueryByName(string queryName, string connectionName = "default")
        {
            // Check cache first
            if (_queryCache.ContainsKey(queryName))
            {
                Logger.Debug($"Query '{queryName}' found in cache");
                return _queryCache[queryName];
            }

            BaseObject query = new BaseObject();
            query["tableName"] = "core.sql";
            
            string sql = "SELECT id, name, sql_text, description, created_by FROM " + 
                        _provider.FormatTableName("core.sql") + 
                        " WHERE " + _provider.FormatColumnName("name") + " = " + 
                        _provider.FormatValue(queryName);

            bool found = false;
            SelectCallback scb = (rdr) =>
            {
                found = true;
                query["id"] = rdr["id"];
                query["name"] = rdr["name"];
                query["sql_text"] = rdr["sql_text"];
                query["description"] = rdr["description"];
                query["created_by"] = rdr["created_by"];
            };

            select(scb, sql, connectionName);

            // Cache the result (even if null to avoid repeated database calls for missing queries)
            if (found)
            {
                _queryCache[queryName] = query;
                Logger.Debug($"Query '{queryName}' cached");
            }
            else
            {
                _queryCache[queryName] = null;
                Logger.Debug($"Query '{queryName}' not found, cached as null");
            }

            return found ? query : null;
        }

        /// <summary>
        /// Executes a query by name and processes the results with a callback
        /// </summary>
        /// <param name="queryName">The name of the query to execute</param>
        /// <param name="callback">Callback function to process each row of results</param>
        /// <param name="connectionName">The name of the connection to use</param>
        public static void ExecuteQueryByName(string queryName, SelectCallback callback, string connectionName = "default")
        {
            BaseObject query = GetQueryByName(queryName, connectionName);
            if (query == null)
            {
                throw new Exception($"Query '{queryName}' not found in core.sql table");
            }

            string sql = query["sql_text"].ToString();
            select(callback, sql, connectionName);
        }

        /// <summary>
        /// Executes a query by name and returns a List<T> where T derives from BaseObject
        /// </summary>
        /// <typeparam name="T">Type that derives from BaseObject</typeparam>
        /// <param name="queryName">The name of the query to execute</param>
        /// <param name="connectionName">The name of the connection to use</param>
        /// <returns>List of T objects</returns>
        public static List<T> ExecuteQueryByName<T>(string queryName, string connectionName = "default") where T : BaseObject, new()
        {
            BaseObject query = GetQueryByName(queryName, connectionName);
            if (query == null)
            {
                throw new Exception($"Query '{queryName}' not found in core.sql table");
            }

            List<T> baseObjects = new List<T>();

            void baseObjectCallback(System.Data.Common.DbDataReader rdr)
            {
                T baseObject = new T();

                DBPersist.autoAssign(rdr, baseObject);

                baseObjects.Add(baseObject);
            };

            string sql = query["sql_text"].ToString();
            select(baseObjectCallback, sql, connectionName);

            return baseObjects;
        }

        /// <summary>
        /// Executes a query by name with template substitution and returns a List<T> where T derives from BaseObject
        /// </summary>
        /// <typeparam name="T">Type that derives from BaseObject</typeparam>
        /// <param name="queryName">The name of the query to execute</param>
        /// <param name="filter">BaseObject containing parameters for template substitution</param>
        /// <param name="connectionName">The name of the connection to use</param>
        /// <returns>List of T objects</returns>
        public static List<T> ExecuteQueryByName<T>(string queryName, BaseObject filter, string connectionName = "default") where T : BaseObject, new()
        {
            BaseObject query = GetQueryByName(queryName, connectionName);
            if (query == null)
            {
                throw new Exception($"Query '{queryName}' not found in core.sql table");
            }

            List<T> baseObjects = new List<T>();

            void baseObjectCallback(System.Data.Common.DbDataReader rdr)
            {
                T baseObject = new T();

                DBPersist.autoAssign(rdr, baseObject);

                baseObjects.Add(baseObject);
            };

            string sqlTemplate = query["sql_text"].ToString();
            select(baseObjectCallback, sqlTemplate, filter, connectionName);

            return baseObjects;
        }

        /// <summary>
        /// Clears the query cache
        /// </summary>
        public static void ClearQueryCache()
        {
            _queryCache.Clear();
            Logger.Debug("Query cache cleared");
        }

        /// <summary>
        /// Refreshes a specific query from the database, bypassing the cache
        /// </summary>
        /// <param name="queryName">The name of the query to refresh</param>
        /// <returns>A BaseObject containing the query information, or null if not found</returns>
        public static BaseObject RefreshQueryByName(string queryName)
        {
            // Remove from cache to force database lookup
            _queryCache.Remove(queryName);
            Logger.Debug($"Query '{queryName}' removed from cache for refresh");
            
            return GetQueryByName(queryName);
        }

        /// <summary>
        /// Gets the number of cached queries
        /// </summary>
        /// <returns>The number of queries currently in the cache</returns>
        public static int GetCacheSize()
        {
            return _queryCache.Count;
        }
    }
}
