
using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Configuration;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Json;
using System.Data.Common;

namespace @Model.Name
{
    public class Config
    {
        static IConfiguration configBuilder = null;
        static Dictionary<string, string> _dbparams = null;

        static IConfiguration getConfigBuilder()
        {
            if (configBuilder == null)
            {
                configBuilder = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", true, true)
                .Build();
            }

            return configBuilder;
        }
        static public string getString(string param)
        {
            // Check if _dbparams is null or empty, populate it if needed
            if (_dbparams == null || _dbparams.Count == 0)
            {
                getDbConnection();  // side effect: populates _dbparams
            }

            string result = string.Empty;

            // Check if the requested parameter is in the _dbparams cache
            if (_dbparams != null && _dbparams.ContainsKey(param))
            {
                result = _dbparams[param];
            }
            else if (param == "db.connection")
            {
                result = getDbConnection();
            }
            else
            {
                IConfigurationSection section = getConfigBuilder().GetSection("appsettings");
                result = section[param];
            }

            return result;
        }

        static public string getString(string param, string defaultValue)
        {
            string result = getString(param);
            return string.IsNullOrEmpty(result) ? defaultValue : result;
        }

        static public string getDbConnection()
        {
            // Initialize cache if needed
            if (_dbparams == null)
            {
                _dbparams = new Dictionary<string, string>();
                
                // Path to the .namespace file in the user's home directory
                string homeDirectory = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                string filePath = Path.Combine(homeDirectory, ".@(Model.Name)");

                // Check if the file exists
                if (!File.Exists(filePath))
                {
                    throw new FileNotFoundException("The .@(Model.Name) file was not found in the user's home directory.", filePath);
                }

                // Read the file content
                string fileContent = File.ReadAllText(filePath).Trim();

                // Split the content by colon (:) to extract parameters
                string[] parameters = fileContent.Split(':');
                if (parameters.Length != 4 && parameters.Length != 6)
                {
                    throw new FormatException("The .@(Model.Name) file must contain either 4 or 6 parameters separated by colons (:).\nFormat: dbtype:server:port:database[:username:password]");
                }

                // Populate the cache
                _dbparams["dbType"] = parameters[0].ToLower().Trim();
                _dbparams["server"] = parameters[1];
                _dbparams["port"] = parameters[2];
                _dbparams["database"] = parameters[3];
                _dbparams["username"] = parameters.Length >= 5 ? parameters[4] : string.Empty;
                _dbparams["password"] = parameters.Length >= 6 ? parameters[5] : string.Empty;
            }

            // Get values from cache
            string dbType = _dbparams["dbType"];
            string server = _dbparams["server"];
            string port = _dbparams["port"];
            string database = _dbparams["database"];
            string username = _dbparams["username"];
            string password = _dbparams["password"];

            // Create the connection string based on database type and whether username/password are provided
            string dbcon;
            if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
            {
                // Full connection string with username and password
                dbcon = getConnectionStringTemplate(dbType, true);
            }
            else
            {
                // Connection string without username and password (for trusted connections)
                dbcon = getConnectionStringTemplate(dbType, false);
            }

            // Replace placeholders with actual values
            dbcon = dbcon.Replace("^server", server)
                        .Replace("^port", port)
                        .Replace("^database", database);

            if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
            {
                dbcon = dbcon.Replace("^username", username)
                            .Replace("^password", password);
            }

            return dbcon;
        }

        static private string getConnectionStringTemplate(string dbType, bool includeCredentials)
        {
            switch (dbType)
            {
                case "sqlserver":
                case "mssql":
                    if (includeCredentials)
                    {
                        return "Server=^server,^port;Database=^database;User Id=^username;Password=^password;TrustServerCertificate=true;";
                    }
                    else
                    {
                        return "Server=^server,^port;Database=^database;Trusted_Connection=true;TrustServerCertificate=true;";
                    }

                case "postgresql":
                case "pgsql":
                default:
                    if (includeCredentials)
                    {
                        return "Host=^server;Port=^port;Database=^database;Username=^username;Password=^password;";
                    }
                    else
                    {
                        return "Host=^server;Port=^port;Database=^database;";
                    }
            }
        }
        
        static public int getInt(string param)
        {
            IConfigurationSection section = getConfigBuilder().GetSection("appsettings");

            return Convert.ToInt32(section[param]);
        }
    }
}
