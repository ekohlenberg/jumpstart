
using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Configuration;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Json;
using System.Data.Common;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace @Model.Name
{
    public class DataSourceConfig
    {
        [JsonPropertyName("dbtype")]
        public string DbType { get; set; }
        
        [JsonPropertyName("hostname")]
        public string Hostname { get; set; }
        
        [JsonPropertyName("port")]
        public string Port { get; set; }
        
        [JsonPropertyName("database")]
        public string Database { get; set; }
        
        [JsonPropertyName("username")]
        public string Username { get; set; }
        
        [JsonPropertyName("password")]
        public string Password { get; set; }
    }
    
    public class NamespaceConfig
    {
        [JsonPropertyName("namespace")]
        public string Namespace { get; set; }
        
        [JsonPropertyName("datasources")]
        public Dictionary<string, DataSourceConfig> DataSourceConfigs { get; set; }
    }

    public class Config
    {
        static IConfiguration configBuilder = null;
        static Dictionary<string, string> _dbparams = null;
        static NamespaceConfig _namespaceConfig = null;
        static string _currentDataSource = "default";

        static IConfiguration getConfigBuilder()
        {
            if (configBuilder == null)
            {
                configBuilder = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", true, true)
                .Build();
            }

            return configBuilder;
        }
        static public string getString(string param)
        {
            // Check if _dbparams is null or empty, populate it if needed
            if (_dbparams == null || _dbparams.Count == 0)
            {
                getDbConnection();  // side effect: populates _dbparams
            }

            string result = string.Empty;

            // Check if the requested parameter is in the _dbparams cache
            if (_dbparams != null && _dbparams.ContainsKey(param))
            {
                result = _dbparams[param];
            }
            else if (param == "db.connection")
            {
                result = getDbConnection();
            }
            else
            {
                IConfigurationSection section = getConfigBuilder().GetSection("appsettings");
                result = section[param];
            }

            return result;
        }

        static public string getString(string param, string defaultValue)
        {
            string result = getString(param);
            return string.IsNullOrEmpty(result) ? defaultValue : result;
        }

        static public void setDataSource(string dataSourceName)
        {
            _currentDataSource = dataSourceName;
            // Clear the cache so it will be rebuilt with the new data source
            _dbparams = null;
        }

        static public string getCurrentDataSource()
        {
            return _currentDataSource;
        }

        static public NamespaceConfig LoadNamespaceConfig()
        {
            if (_namespaceConfig == null)
            {
                // Path to the .namespace.json file in the user's home directory
                string homeDirectory = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                string jsonFilePath = Path.Combine(homeDirectory, ".@(Model.Name).json");
                string legacyFilePath = Path.Combine(homeDirectory, ".@(Model.Name)");

                // Check for JSON file first, fall back to legacy format
                if (File.Exists(jsonFilePath))
                {
                    // Read and parse JSON file
                    string jsonContent = File.ReadAllText(jsonFilePath);
                    _namespaceConfig = JsonSerializer.Deserialize<NamespaceConfig>(jsonContent);
                    
                    if (_namespaceConfig == null || _namespaceConfig.DataSourceConfigs == null || _namespaceConfig.DataSourceConfigs.Count == 0)
                    {
                        throw new FormatException("The .@(Model.Name).json file is invalid or contains no data sources.");
                    }
                }
                else if (File.Exists(legacyFilePath))
                {
                    // Parse legacy format for backward compatibility
                    _namespaceConfig = parseLegacyFormat(legacyFilePath);
                }
                else
                {
                    throw new FileNotFoundException("Neither .@(Model.Name).json nor .@(Model.Name) file was found in the user's home directory.", jsonFilePath);
                }
            }
            
            return _namespaceConfig;
        }

        static private NamespaceConfig parseLegacyFormat(string filePath)
        {
            // Read the legacy file content
            string fileContent = File.ReadAllText(filePath).Trim();

            // Split the content by colon (:) to extract parameters
            string[] parameters = fileContent.Split(':');
            if (parameters.Length != 4 && parameters.Length != 6)
            {
                throw new FormatException("The .@(Model.Name) file must contain either 4 or 6 parameters separated by colons (:).\nFormat: dbtype:server:port:database[:username:password]");
            }

            // Create a NamespaceConfig with a single "default" data source
            var config = new NamespaceConfig
            {
                Namespace = "@(Model.Name)",
                DataSourceConfigs = new Dictionary<string, DataSourceConfig>
                {
                    ["default"] = new DataSourceConfig
                    {
                        DbType = parameters[0].ToLower().Trim(),
                        Hostname = parameters[1].Trim(),
                        Port = parameters[2].Trim(),
                        Database = parameters[3].Trim(),
                        Username = parameters.Length >= 5 ? parameters[4].Trim() : string.Empty,
                        Password = parameters.Length >= 6 ? parameters[5].Trim() : string.Empty
                    }
                }
            };

            return config;
        }

        static public string getDbConnection()
        {
            return getDbConnection(_currentDataSource);
        }

        static public string getDbConnection(string dataSourceName)
        {
            // Initialize cache if needed
            if (_dbparams == null)
            {
                _dbparams = new Dictionary<string, string>();
                
                // Load the namespace configuration
                var config = LoadNamespaceConfig();
                
                // Get the requested data source
                if (!config.DataSourceConfigs.ContainsKey(dataSourceName))
                {
                    throw new KeyNotFoundException($"Data source '{dataSourceName}' not found in configuration. Available data sources: {string.Join(", ", config.DataSourceConfigs.Keys)}");
                }
                
                var dataSource = config.DataSourceConfigs[dataSourceName];

                // Populate the cache
                _dbparams["dbType"] = dataSource.DbType?.ToLower().Trim() ?? "postgresql";
                _dbparams["server"] = dataSource.Hostname ?? "localhost";
                _dbparams["port"] = dataSource.Port ?? "5432";
                _dbparams["database"] = dataSource.Database ?? "";
                _dbparams["username"] = dataSource.Username ?? "";
                _dbparams["password"] = dataSource.Password ?? "";
            }

            // Get values from cache
            string dbType = _dbparams["dbType"];
            string server = _dbparams["server"];
            string port = _dbparams["port"];
            string database = _dbparams["database"];
            string username = _dbparams["username"];
            string password = _dbparams["password"];

            // Create the connection string based on database type and whether username/password are provided
            string dbcon;
            if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
            {
                // Full connection string with username and password
                dbcon = getConnectionStringTemplate(dbType, true);
            }
            else
            {
                // Connection string without username and password (for trusted connections)
                dbcon = getConnectionStringTemplate(dbType, false);
            }

            // Replace placeholders with actual values
            dbcon = dbcon.Replace("^server", server)
                        .Replace("^port", port)
                        .Replace("^database", database);

            if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
            {
                dbcon = dbcon.Replace("^username", username)
                            .Replace("^password", password);
            }

            return dbcon;
        }

        static private string getConnectionStringTemplate(string dbType, bool includeCredentials)
        {
            switch (dbType)
            {
                case "sqlserver":
                case "mssql":
                    if (includeCredentials)
                    {
                        return "Server=^server,^port;Database=^database;User Id=^username;Password=^password;TrustServerCertificate=true;";
                    }
                    else
                    {
                        return "Server=^server,^port;Database=^database;Trusted_Connection=true;TrustServerCertificate=true;";
                    }

                case "postgresql":
                case "pgsql":
                default:
                    if (includeCredentials)
                    {
                        return "Host=^server;Port=^port;Database=^database;Username=^username;Password=^password;";
                    }
                    else
                    {
                        return "Host=^server;Port=^port;Database=^database;";
                    }
            }
        }
        
        static public int getInt(string param)
        {
            IConfigurationSection section = getConfigBuilder().GetSection("appsettings");

            return Convert.ToInt32(section[param]);
        }
    }
}
