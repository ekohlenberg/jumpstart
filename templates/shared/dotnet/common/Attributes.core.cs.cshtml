using System;
using System.Reflection;

namespace @Model.Namespace
{

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field)]
	public class ClassInfoAttribute : Attribute
	{
	    public string Label { get; }

	    public ClassInfoAttribute(string label)
	    {
	        Label = label;
	    }

	    public static string GetClassLabel<T>()
	    {
	        var ClassInfoAttribute = typeof(T).GetCustomAttribute<ClassInfoAttribute>();
	        return ClassInfoAttribute?.Label ?? $"No Label found for class '{typeof(T).Name}'";
	    }

	  
	}

	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field)]
	public class ColumnInfoAttribute : Attribute
	{
	    public string Label { get; }

	    public ColumnInfoAttribute(string label)
	    {
	        Label = label;
	    }

	  

	    public static string GetPropertyLabel<T>(string propertyName)
	    {
	        var property = typeof(T).GetProperty(propertyName);
	        if (property != null)
	        {
	            var ColumnInfoAttribute = property.GetCustomAttribute<ColumnInfoAttribute>();
	            return ColumnInfoAttribute?.Label ?? $"No Label found for '{propertyName}'";
	        }
	        return $"Property '{propertyName}' not found";
	    }
	}
}
