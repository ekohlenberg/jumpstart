@{
    string namespaceName = @Model.Namespace;
    string className = @Model.DomainObj; 
    string schemaName = @Model.SchemaName; 
    string tableName = @Model.TableName; 
    string classLabel = @Model.Label; 
}

using System;
using System.Reflection;

namespace @namespaceName
{
    [Label("@classLabel")]
    public partial class @className : BaseObject
    {
        protected override void Initialize()
        {
            // Default initializer
            domainName = "@(className)";
            tableName = "@schemaName.@tableName";
            tableBaseName = "@tableName";
            auditTableName = "history.@(schemaName)_@(tableName)";

            @foreach (var attr in Model.Attributes)
            {
                if (attr.RWK == "1")
                {
            <text>
            rwk.Add("@attr.Name");
            </text>
                }
    
                
            }

            @foreach (var attr in Model.Attributes)
            {
                
            <text>
            _defaults["@attr.Name"] = default(@attr.DotNetType);
            </text>
                
            }
        }

        @foreach (var attr in Model.Attributes)
        {
            <text>
            [Label("@attr.Label")]
            public @attr.DotNetType @attr.Name
            {
                get
                {
                    @attr.DotNetType _@attr.Name;
                    @{
                        if (attr.DotNetType == "string")
                        {
                            <text>
                            _@attr.Name = string.Empty;
                            </text>
                        } 
                        else
                        {
                            <text>
                             _@attr.Name = default(@attr.DotNetType);
                             </text>
                        }
                    }
                    
                    try
                    {
                        if(this.ContainsKey("@attr.Name"))
                        {
                        _@attr.Name = Convert.@(attr.ConvertMethod)(this["@attr.Name"].ToString());
                        }
                    }
                    catch(Exception )
                    {
                        //Logger.Error($"Error getting @attr.Name: {e.Message}");
                        _@attr.Name = default(@attr.DotNetType);
                    }
                    return _@attr.Name;
                }
                set
                {
                   
                    this["@attr.Name"] = value;
                }
            }
            </text>
        }
    }

    public partial class @(className)History : @className
    {
        protected override void Initialize()
        {
            // History object initializer - override table name and add foreign key
            base.Initialize();
            
            domainName = "@(className)History";
            tableName = "history.@(schemaName)_@(tableName)";
            tableBaseName = "@(schemaName)_@(tableName)";
          

            // Add the foreign key to the original object
            rwk.Add("@(tableName)_id");
            _defaults["@(tableName)_id"] = default(long);
        }

        // Foreign key property to the original object
        [Label("@(classLabel) ID")]
        public long @(tableName)_id
        {
            get
            {
                long _@(tableName)_id = default(long);
                
                try
                {
                    if(this.ContainsKey("@(tableName)_id"))
                    {
                        _@(tableName)_id = Convert.ToInt64(this["@(tableName)_id"].ToString());
                    }
                }
                catch(Exception)
                {
                    //Logger.Error($"Error getting @(tableName)_id: {e.Message}");
                    _@(tableName)_id = default(long);
                }
                return _@(tableName)_id;
            }
            set
            {
                this["@(tableName)_id"] = value;
            }
        }
    }
}
