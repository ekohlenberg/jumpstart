import React, { Component } from 'react'
import @(Model.DomainObj)Service from '../services/@(Model.Name)-service';
import { withNavigation } from './with-navigation';


class @(Model.DomainObj)CreateComponent extends Component {
    constructor(props) {
        super(props)

        this.state = {
            // step 2
            id: this.props.params?.id || '',
            @for( int i = 0; i < Model.UserAttributes.Count; i++)
            {
                
                var attr = Model.UserAttributes[i];
                if (attr.Name == "id") continue;
                
                var comma = (i < Model.UserAttributes.Count - 1 ? "," : "");
                <text>
                    @attr.Name: '' @comma
                </text>
            }
            
        }
        @for( int i = 0; i < Model.UserAttributes.Count; i++)
            {
                var attr = Model.UserAttributes[i];

                <text>                    
                    this.change@(attr.PascalName)Handler = this.change@(attr.PascalName)Handler.bind(this);
                </text>
            }
        this.saveOrUpdate@(Model.DomainObj) = this.saveOrUpdate@(Model.DomainObj).bind(this);
    }

    // step 3
    componentDidMount(){

        

        // step 4
        if(this.state.id === '_add'){
            return
        }else{
            console.log ("@(Model.DomainObj) componentDidMount() ID= " + this.state.id )
            @(Model.DomainObj)Service.get@(Model.DomainObj)ById(this.state.id).then( (res) =>{
                let @(Model.DomainVar) = res.data;
                this.setState({
                    @for( int i = 0; i < Model.UserAttributes.Count; i++)
                    {
                        var attr = Model.UserAttributes[i];
                        var comma = (i < Model.UserAttributes.Count - 1 ? "," : "");

                        <text>
                            @attr.Name: @(Model.DomainVar).@(attr.Name) @(comma)
                        </text>
                    }

                });
            });
        }   
        
       ;
    }
    saveOrUpdate@(Model.DomainObj) = (e) => {
        e.preventDefault();
        let @(Model.DomainVar) = {
            @for( int i = 0; i < Model.UserAttributes.Count; i++)
            {
                var attr = Model.UserAttributes[i];
                var comma = (i < Model.UserAttributes.Count - 1 ? "," : "");

                <text>
                    @(attr.Name): this.state.@(attr.Name) @(comma) 
                </text>
            }
        };
        console.log('@(Model.DomainVar) => ' + JSON.stringify(@(Model.DomainVar)));

        // step 5
        if(this.state.id === '_add'){
            @(Model.DomainObj)Service.create@(Model.DomainObj)(@(Model.DomainVar)).then(res =>{
                this.props.history.push('/@(Model.DomainVar)');
            });
        }else{
            @(Model.DomainObj)Service.update@(Model.DomainObj)(@(Model.DomainVar), this.state.id).then( res => {
                this.props.history.push('/@(Model.DomainVar)');
            });
        }
    }
    
    @for( int i = 0; i < Model.UserAttributes.Count; i++)
    {
        var attr = Model.UserAttributes[i];
        var comma = (i < Model.UserAttributes.Count - 1 ? "," : "");

        <text>
        change@(attr.PascalName)Handler= (event) => {
            this.setState({@(attr.Name): event.target.value});
        }
        </text>
    }
    cancel(){
        this.props.history.push('/@(Model.DomainVar)');
    }

    getTitle(){
        if(this.state.id === '_add'){
            return <h3 className="text-center">Add @(Model.DomainObj)</h3>
        }else{
            return <h3 className="text-center">Update @(Model.DomainObj)</h3>
        }
    }
    render() {
        return (
            <div>
                <br></br>
                   <div className = "container">
                        <div className = "row">
                            <div className = "card col-md-6 offset-md-3 offset-md-3">
                                {
                                    this.getTitle()
                                }
                                <div className = "card-body">
                                    <form>
                                        
                                        @for( int i = 0; i < Model.UserAttributes.Count; i++)
                                        {
                                            var attr = Model.UserAttributes[i];

                                            <text>                    
                                            <div className = "form-group">
                                            <br/>
                                            <label> @(attr.Label): </label>
                                            <input placeholder="" name="@(attr.Name)" className="form-control" 
                                                value={this.state.@(attr.Name)} onChange={this.change@(attr.PascalName)Handler}/>
                                            </div>
                                            </text>
                                        }
                                        <button className="btn btn-success" onClick={this.saveOrUpdate@(Model.DomainObj)}>Save</button>
                                        <button className="btn btn-danger" onClick={this.cancel.bind(this)} style={{marginLeft: "10px"}}>Cancel</button>
                                    </form>
                                </div>
                            </div>
                        </div>

                   </div>
            </div>
        )
    }
}

export default withNavigation(@(Model.DomainObj)CreateComponent);